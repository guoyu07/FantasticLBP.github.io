<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杭城小刘</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-02T01:59:51.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杭城小刘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>叶琳利</title>
    <link href="http://yoursite.com/2017/11/02/%E5%8F%B6%E7%90%B3%E5%88%A9/"/>
    <id>http://yoursite.com/2017/11/02/叶琳利/</id>
    <published>2017-11-02T01:58:18.000Z</published>
    <updated>2017-11-02T01:59:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="叶琳利-💗so-cute"><a href="#叶琳利-💗so-cute" class="headerlink" title="叶琳利 💗so cute"></a>叶琳利 💗so cute</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;叶琳利-💗so-cute&quot;&gt;&lt;a href=&quot;#叶琳利-💗so-cute&quot; class=&quot;headerlink&quot; title=&quot;叶琳利 💗so cute&quot;&gt;&lt;/a&gt;叶琳利 💗so cute&lt;/h3&gt;
      
    
    </summary>
    
    
      <category term="main" scheme="http://yoursite.com/tags/main/"/>
    
  </entry>
  
  <entry>
    <title>JSON的一些骚操作</title>
    <link href="http://yoursite.com/2017/10/16/JSON%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/10/16/JSON的一些骚操作/</id>
    <published>2017-10-16T08:40:01.000Z</published>
    <updated>2017-10-16T08:40:30.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>将json转换为对象JSON.parse()函数的第二个参数用来转换解析出的属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">JSON.parse(&apos;&#123;&quot;name&quot;:&quot;lbp&quot;,&quot;age&quot;:&quot;20&quot;&#125;&apos;,function(key,value)&#123;</div><div class="line">if(key == &quot;name&quot;)&#123;</div><div class="line">return value + &quot;同学&quot;;</div><div class="line">&#125;</div><div class="line">return value;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>将对象转换为json，JSON.stringify()函数的第二个参数用来筛选对象的键值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var student = &#123;&quot;name&quot;:&quot;小米&quot;,&quot;age&quot;:22,&quot;height&quot;:177,&quot;skills&quot;:[&quot;js&quot;,&quot;oc&quot;]&#125;;</div><div class="line">function convert(key,value)&#123;</div><div class="line">if (typeof value === &quot;string&quot;) &#123;</div><div class="line">return value.toString().toUpperCase();</div><div class="line">&#125;</div><div class="line">return value;</div><div class="line">&#125;</div><div class="line">JSON.stringify(student,convert,&apos;  &apos;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;将json转换为对象JSON.parse()函数的第二个参数用来转换解析出的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2017/10/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/10/16/正则表达式/</id>
    <published>2017-10-16T08:38:59.000Z</published>
    <updated>2017-10-16T08:39:35.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>\d ：匹配一个数字</li><li>\w : 匹配任意一个字母或数字</li><li>. : 可以匹配任意字符串</li><li>* : 可以匹配任意个字符（包括0个）</li><li>+: 至少一个字符</li><li><p>? : 表示0个或1个字符</p></li><li><p>{n} :表示n个字符</p></li><li><p>{n-m} : 表示n-m个字符</p></li><li><p>[ ] ：表示范围</p></li><li><p>[0-9a-zA-Z\_] : 可以匹配一个数字、字母或者下划线</p></li><li><p>[0-9a-zA-Z\_]+: 可以匹配至少由一个数字、字母或者下划线组成的字符串</p></li><li><p>[0-9a-zA-Z_$][0-9a-zA-Z__$]* : 可以匹配由数字、字母或者下划线，后接任意个由一个数字、字母或者下划线、$组成的字符串</p></li></ul><h1 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h1><p>JS有2种方式创建一个正则表达式。</p><p>第一种方式是直接通过/正则表达式/写出来。</p><p>第二种 是通过new RegExp(‘正则表达式’)创建一个RegExp对象。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>因为第二种的写法问题，所以每个<code>\</code>  需要转义，也就是 <code>\\</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">function test()&#123;</div><div class="line">var node = document.getElementById(&quot;validate&quot;).value;</div><div class="line">var regStr = /^[0-9a-zA-Z]&#123;3,8&#125;\s*\d[3-8]*$/;</div><div class="line">var regStr2 = new RegExp(&apos;^[0-9a-zA-Z]&#123;3,8&#125;\\s*\\d[3-8]*$&apos;);</div><div class="line">console.log(regStr2.test(node));</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入&quot; id=&quot;validate&quot; /&gt;</div><div class="line">&lt;button  onclick=&quot;test()&quot;&gt;检测&lt;/button&gt;</div></pre></td></tr></table></figure><h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><p>除了简单地判断是否匹配外，正则表达式还可以用来提取分组 ，用 <code>()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">function test()&#123;</div><div class="line">var node = document.getElementById(&quot;validate&quot;).value;</div><div class="line">var regStr = /^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$/;</div><div class="line">var regStr2 = new RegExp(&apos;^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$&apos;);</div><div class="line">console.log(regStr2.exec(node));</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入&quot; id=&quot;validate&quot; /&gt;</div><div class="line">&lt;button  onclick=&quot;test()&quot;&gt;检测&lt;/button&gt;</div></pre></td></tr></table></figure><ul><li><p>如果正则表达式中定义了组，就可以在RegExp对象上用exec()方法提取出子串来。</p></li><li><p>exec()方法在匹配成功后会返回一个Array，第一个元素为正则表达式匹配到的整个字符串，后面的元素则表示匹配成功的子串。</p></li><li>exec()方法在匹配失败后会返回null</li></ul><h1 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h1><p>由于 正则表达式默认使用贪婪匹配模式，因此会造成一些问题。比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var res = /^(\d+)(0*)$/;</div><div class="line">res.exec(&apos;102300&apos;);        //[&apos;102300&apos;,&apos;102300&apos;,&apos;&apos;]</div></pre></td></tr></table></figure><p>由于\d+采用贪婪匹配模式，所以会匹配到后面的0，所以加上\d+?代表使用非贪婪匹配模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var res = /^(\d+?)(0*)$/;</div><div class="line">res.exec(&apos;102300&apos;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;\d ：匹配一个数字&lt;/li&gt;
&lt;li&gt;\w : 匹配任意一个字母或数字&lt;/li&gt;
&lt;li&gt;. : 可以匹配任意字符串&lt;/li&gt;
&lt;li&gt;* : 可以匹配任意个字符（包括0个）&lt;/li&gt;
&lt;li&gt;+: 至少一个字符&lt;/li&gt;
&lt;li&gt;&lt;p&gt;? : 表示0个或1个
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>generator函数</title>
    <link href="http://yoursite.com/2017/10/16/generator%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/10/16/generator函数/</id>
    <published>2017-10-16T08:32:20.000Z</published>
    <updated>2017-10-16T08:39:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>generator（生成器）是ES6标准引入的新的数据类型，一个generator看上起像一个函数，但是可以返回多次.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">&apos;use strict&apos;;</div><div class="line">function *foo(max)&#123;</div><div class="line">var n = 0;</div><div class="line">while(n&lt;max)&#123;</div><div class="line">yield n;</div><div class="line">n++;</div><div class="line">&#125;</div><div class="line">return n;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var f = foo(3);</div><div class="line">//方式1</div><div class="line">console.log(f.next());</div><div class="line">console.log(f.next());</div><div class="line">console.log(f.next());</div><div class="line">console.log(f.next());</div><div class="line">//方式2</div><div class="line">for(var f of foo(3))&#123;</div><div class="line">console.log(f);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><ul><li>next()方法会执行一个generator的代码，然后每次遇到yield x；就返回一个对象{value:x,done:true/false},然后暂停。返回的value就是yield的返回值，done表示这个generator是否已经执行结束了，如果为done为true则value就是return的返回值。</li><li>当执行到done为true时，这个generator对象就已经全部执行完毕，就不要再继续调用next()</li><li>第2个方法就是直接调用for…of循环迭代generator对象，这种方式不需要我们自己判断done</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>generator：可以把异步代码变成“同步”代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">try&#123;</div><div class="line">r1 = yield ajax(&quot;http://test1.com/get&quot;,data1);</div><div class="line">r2 = yield ajax(&quot;http://test1.com/get&quot;,data1);</div><div class="line">r3 = yield ajax(&quot;http://test1.com/get&quot;,data1);</div><div class="line">success(r3);</div><div class="line">&#125;catch(e)&#123;</div><div class="line">//TODO handle the exception</div><div class="line">handle(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;generator（生成器）是ES6标准引入的新的数据类型，一个generator看上起像一个函数，但是可以返回多次.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>HyBrid探索（一）</title>
    <link href="http://yoursite.com/2017/10/13/HyBrid%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/13/HyBrid探索（一）/</id>
    <published>2017-10-13T07:50:05.000Z</published>
    <updated>2017-10-13T08:29:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="UIWebView加载网页内容"><a href="#UIWebView加载网页内容" class="headerlink" title="UIWebView加载网页内容"></a>UIWebView加载网页内容</h4><p>可以通过本地文件、url等方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *htmlPath = [[NSBundle mainBundle] pathForResource:@&quot;index&quot; ofType:@&quot;html&quot;];</div><div class="line">NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL fileURLWithPath:htmlPath]];</div><div class="line">[self.webView loadRequest:request];</div></pre></td></tr></table></figure><h4 id="Native调用JavaScript"><a href="#Native调用JavaScript" class="headerlink" title="Native调用JavaScript"></a>Native调用JavaScript</h4><p>Native调用JS是通过UIWebView的stringByEvaluatingJavaScriptFromString 方法实现的，该方法返回js脚本的执行结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[webView stringByEvaluatingJavaScriptFromString:@&quot;Math.random();&quot;];</div></pre></td></tr></table></figure><p>实际上就是调用了网页的Window下的一个对象。如果我们需要让native端调用js方法，那么这个js方法必须在window下可以访问到。</p><h4 id="JavaScript调用Native"><a href="#JavaScript调用Native" class="headerlink" title="JavaScript调用Native"></a>JavaScript调用Native</h4><p>反过来，JavaScript调用Native，并没有现成的API可以调用，而是间接地通过一些其它手段来实现。UIWebView有个代理方法：在UIWebView内发起的任何网络请求都可以通过delegate函数在Native层得到通知。由此思路，我们就可以在UIWebView内发起一个自定义的网络请求，通常是这样的格式：<strong>jsbridge://methodName?param1=value1&amp;param2=value2…</strong></p><p>在UIWebView的delegate函数中，我们判断请求的scheme，如果request.URL.scheme是jsbridge，那么就不进行网页内容的加载，而是去执行相应的方法。方法名称就是request.URL.host。参数可以通过request.URL.query得到。</p><p>问题来了？？</p><p>发起这样1个网络请求有2种方式。1:location.href .2：iframe。通过location.href有个问题，就是如果js多次调用原生的方法也就是location.href的值多次变化，Native端只能接受到最后一次请求，前面的请求会被忽略掉。</p><p>使用ifrmae方式，以调用Native端的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var iFrame;</div><div class="line">iFrame = document.createElement(&quot;iframe&quot;);</div><div class="line">iFrame.style.height = &quot;1px&quot;;</div><div class="line">iFrame.style.width = &quot;1px&quot;;</div><div class="line">iFrame.style.display = &quot;none&quot;;</div><div class="line">iFrame.src = url;</div><div class="line">document.body.appendChild(iFrame);</div><div class="line">setTimeout(function()&#123;</div><div class="line">iFrame.remove();</div><div class="line">&#125;,100);</div></pre></td></tr></table></figure><p>举个🌰：</p><p>需求：</p><p>原生端提供一个UIWebView，加载一个网页内容。还有1个按钮，按钮点击一下网页增加一段段落文本。网页上有2个输入框，用户输入数字，点击按钮，js将用户输入的参数告诉native端，native去执行加法，计算完成后将结果返回给js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">//index.html</div><div class="line"></div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf8&quot;&gt;</div><div class="line">&lt;script language=&quot;javascript&quot;&gt;</div><div class="line">function loadURL(url)&#123;</div><div class="line">var iFrame;</div><div class="line">iFrame = document.createElement(&quot;iframe&quot;);</div><div class="line">iFrame.style.height = &quot;1px&quot;;</div><div class="line">iFrame.style.width = &quot;1px&quot;;</div><div class="line">iFrame.style.display = &quot;none&quot;;</div><div class="line">iFrame.src = url;</div><div class="line">document.body.appendChild(iFrame);</div><div class="line">setTimeout(function()&#123;</div><div class="line">iFrame.remove();</div><div class="line">&#125;,100);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function receiveValue(value)&#123;</div><div class="line">alert(&quot;从原生拿到加法结果为：&quot;+value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function check() &#123;</div><div class="line">var par1 = document.getElementById(&quot;par1&quot;).value;</div><div class="line">var par2 = document.getElementById(&quot;par2&quot;).value;</div><div class="line">loadURL(&quot;JSBridge://plus?par1=&quot; + par1 +&quot;&amp;par2=&quot; + par2);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入数字&quot;  id=&quot;par1&quot;／&gt; + &lt;input type=&quot;text&quot; placeholder=&quot;请输入数字&quot;  id=&quot;par2&quot;／&gt;</div><div class="line">&lt;input type=&quot;button&quot; value=&quot;=&quot; onclick=&quot;check()&quot; /&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//ViewController.m</div><div class="line"></div><div class="line">-(void)addContentToWebView&#123;</div><div class="line">NSString *jsString = @&quot; var pNode = document.createElement(\&quot;p\&quot;); pNode.innerText = \&quot;我是由原生代码调用js后将一段文件添加到html上，也就是注入\&quot;;document.body.appendChild(pNode);&quot;;</div><div class="line">[self.webView stringByEvaluatingJavaScriptFromString:jsString];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">-(NSInteger)plusparm:(NSInteger)par1 parm2:(NSInteger)par2&#123;</div><div class="line">return par1 + par2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">#pragma mark -- UIWebViewDelegate</div><div class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType&#123;</div><div class="line">NSURL *url = request.URL;</div><div class="line">NSString *scheme = url.scheme;</div><div class="line">NSString *method = url.host;</div><div class="line">NSString *parms =  url.query;</div><div class="line">NSArray *pars = [parms componentsSeparatedByString:@&quot;&amp;&quot;];</div><div class="line">NSInteger par1 = [[pars[0] substringFromIndex:5] integerValue];</div><div class="line">NSInteger par2 = [[pars[1] substringFromIndex:5] integerValue];</div><div class="line">if ([scheme isEqualToString:@&quot;jsbridge&quot;]) &#123;</div><div class="line">//发现scheme是JSBridge，那么就是自定义的URLscheme，不去加载网页内容而拦截去处理事件。</div><div class="line"></div><div class="line">if ([method isEqualToString:@&quot;plus&quot;]) &#123;</div><div class="line">NSInteger result = [self plusparm:par1 parm2:par2];</div><div class="line">[self.webView stringByEvaluatingJavaScriptFromString:[NSString stringWithFormat:@&quot;receiveValue(%@);&quot;,@(result)]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">return NO;</div><div class="line">&#125;</div><div class="line">return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="同步和异步问题"><a href="#同步和异步问题" class="headerlink" title="同步和异步问题"></a>同步和异步问题</h4><p>js调用native是通过在一个网页上插入一个iframe，这个iframe插入完了就完了，执行的结果需要native另外调用stringByEvaluatingJavaScriptString 方法通知js。这明显是1个异步的调用。而stringByEvaluatingJavaScriptString方法会返回执行js脚本的结果。本质上是一个同步调用</p><p>所以js call native是异步，native call js是同步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;UIWebView加载网页内容&quot;&gt;&lt;a href=&quot;#UIWebView加载网页内容&quot; class=&quot;headerlink&quot; title=&quot;UIWebView加载网页内容&quot;&gt;&lt;/a&gt;UIWebView加载网页内容&lt;/h4&gt;&lt;p&gt;可以通过本地文件、url等方式。&lt;/
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>hitTest和pointInside方法你真的熟吗？</title>
    <link href="http://yoursite.com/2017/10/12/hitTest%E5%92%8CpointInside%E6%96%B9%E6%B3%95%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%86%9F%E5%90%97%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/10/12/hitTest和pointInside方法你真的熟吗？/</id>
    <published>2017-10-12T02:51:32.000Z</published>
    <updated>2017-10-12T02:52:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hittest方法"><a href="#hittest方法" class="headerlink" title="hittest方法"></a>hittest方法</h3><ul><li>就是用来寻找最合适的view</li><li>当一个事件传递给一个控件，就会调用这个控件的hitTest方法</li><li>点击了白色的view： 触摸事件 -&gt; UIApplication -&gt; UIWindow 调用 [UIWindow hitTest] -&gt; 白色view [WhteView hitTest]</li></ul><p>实验1:</p><p>定义 BaseView，在里面实现方法touchBegan，监听当前哪个类调用了该方法。</p><p>定义KeyWindow，在里面实现hitTest方法，监听哪个类调用了该方法，用来追踪判断哪个view是最合适的view</p><p>在控制器的界面上加5个颜色不同的view，每个view自定义view去实现，因此在不同的view上的手势就可以由不同的view拦截到。</p><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/Simulator%20Screen%20Shot%20-%20iPhone%206s%20Plus%20-%202017-10-11%20at%2010.14.37.png" alt="UI效果图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//KeyWindow</div><div class="line"></div><div class="line">-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</div><div class="line">UIView *view = [super hitTest:point withEvent:event];</div><div class="line">NSLog(@&quot;fittest-&gt;%@&quot;,view);</div><div class="line">return view;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>结果：</p><p>点击了白色1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">2017-10-11 16:48:52.882547+0800 主流App框架[16295:358790] BrownView--hitTest withEvent</div><div class="line">2017-10-11 16:48:59.646610+0800 主流App框架[16295:358790] GreenView--hitTest withEvent</div><div class="line">2017-10-11 16:48:59.647145+0800 主流App框架[16295:358790] fittest-&gt;&lt;UIView: 0x7f8f23406510; frame = (0 0; 414 736); autoresize = W+H; layer = &lt;CALayer: 0x60c000221840&gt;&gt;</div><div class="line">2017-10-11 16:48:59.647575+0800 主流App框架[16295:358790] BrownView--hitTest withEvent</div><div class="line">2017-10-11 16:48:59.647702+0800 主流App框架[16295:358790] GreenView--hitTest withEvent</div><div class="line">2017-10-11 16:48:59.647880+0800 主流App框架[16295:358790] fittest-&gt;&lt;UIView: 0x7f8f23406510; frame = (0 0; 414 736); autoresize = W+H; layer = &lt;CALayer: 0x60c000221840&gt;&gt;</div></pre></td></tr></table></figure><p>点击了蓝色3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">2017-10-11 16:49:56.331024+0800 主流App框架[16295:358790] BrownView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.331335+0800 主流App框架[16295:358790] BView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.331617+0800 主流App框架[16295:358790] BlueView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.331968+0800 主流App框架[16295:358790] YellowView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.333206+0800 主流App框架[16295:358790] fittest-&gt;&lt;BlueView: 0x7f8f23406f10; frame = (19 21; 240 128); autoresize = RM+BM; layer = &lt;CALayer: 0x60c0002218c0&gt;&gt;</div><div class="line">2017-10-11 16:49:56.333633+0800 主流App框架[16295:358790] BrownView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.333762+0800 主流App框架[16295:358790] BView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.333893+0800 主流App框架[16295:358790] BlueView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.334005+0800 主流App框架[16295:358790] YellowView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.334185+0800 主流App框架[16295:358790] fittest-&gt;&lt;BlueView: 0x7f8f23406f10; frame = (19 21; 240 128); autoresize = RM+BM; layer = &lt;CALayer: 0x60c0002218c0&gt;&gt;</div><div class="line">2017-10-11 16:49:56.334644+0800 主流App框架[16295:358790] BlueView</div></pre></td></tr></table></figure><p>那么看出来hitTest方法的作用就是找出最合适的view，那么我们可以指定任何事情的最合适的view为特定的view</p><p>实验2:</p><p>在KeyWindow中hitTest方法中返回BlueView，那么点击任何色块的view那么都会交给BlueView去处理事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//KeyWindow</div><div class="line">-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</div><div class="line">return self.subviews.firstObject.subviews.firstObject;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-10-11 22:48:46.102793+0800 主流App框架[21498:749663] GreenView</div><div class="line">2017-10-11 22:48:46.668595+0800 主流App框架[21498:749663] GreenView</div></pre></td></tr></table></figure><p>因为事件的响应者链条就是当用户操作屏幕会产生一个事件，该事件被系统加入到事件队列中去，UIApplication对象会将事件队列中最早加入进去的事件传递给window，然后window找到最合适的view去处理事件。因此任何事件都会先通过KeyWindow对象去判断并找到最合适的view</p><h2 id="2个重要的方法"><a href="#2个重要的方法" class="headerlink" title="2个重要的方法"></a>2个重要的方法</h2><ul><li><p>-(BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event： 用来判断触摸点是否在控件上</p></li><li><p>-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event： 用来判断控件是否接受事件以及找到最合适的view</p></li></ul><h2 id="模仿系统实现找出最合适的view"><a href="#模仿系统实现找出最合适的view" class="headerlink" title="模仿系统实现找出最合适的view"></a>模仿系统实现找出最合适的view</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//KeyWindow</div><div class="line"></div><div class="line">/**</div><div class="line">模仿系统实现寻找最合适的view步骤</div><div class="line">1、控件接收事件</div><div class="line">2、触摸点在自己身上</div><div class="line">3、从后往前遍历子控件，重复前面2个步骤</div><div class="line">4、如果没有符合条件的子控件，那么就自己最合适</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line">-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</div><div class="line">if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt;= 0.01) &#123;</div><div class="line">return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (![self pointInside:point withEvent:event]) &#123;</div><div class="line">return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (NSUInteger index = self.subviews.count - 1; index &gt;= 0; index--) &#123;</div><div class="line">CGPoint childViewPoint = [self convertPoint:point toView:self.subviews[index]];</div><div class="line">UIView *fitestView = [self.subviews[index] hitTest:childViewPoint withEvent:event];</div><div class="line">if (fitestView) &#123;</div><div class="line">return fitestView;</div><div class="line">&#125;</div><div class="line">return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>给出 一个Demo地址：<a href="https://github.com/FantasticLBP/BlogDemos/tree/master/模仿系统找出事件的最佳响应者" title="模仿系统找出事件的最佳响应者" target="_blank" rel="external">https://github.com/FantasticLBP/BlogDemos/tree/master/模仿系统找出事件的最佳响应者</a></p><p>实验：</p><p>在控制器（ViewController）的view上先添加一个UIButton，再添加一个自定义的UIView(ShelterView),盖在button的上面。</p><p>需求：点击ShelterView上的点，如果点也在UIButton范围上则交给UIButton处理事件，如果不在UIButton上则交给ShelterView处理，如果点击屏幕上除了ShelterView之外的点则交给控制器的view处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">//ViewController</div><div class="line">-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123;</div><div class="line">NSLog(@&quot;viewController-&gt;%s&quot;,__func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//ShelterView</div><div class="line">#import &quot;ShelterView.h&quot;</div><div class="line"></div><div class="line">@implementation ShelterView</div><div class="line"></div><div class="line">-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123;</div><div class="line">NSLog(@&quot;%s&quot;,__func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</div><div class="line">NSLog(@&quot;%s&quot;,__func__);</div><div class="line">/**</div><div class="line">需求：不管点击按钮还是view都交给button处理</div><div class="line">思路：在view的hitTest方法中寻找最合适的view，那么返回nil告诉系统view不是最合适的view，那么系统则认为按钮是最合适的view</div><div class="line">return nil;</div><div class="line">*/</div><div class="line"></div><div class="line">//需求，在view上点击，如果点击范围在button上则由button进行处理事件；否则交给view处理事件</div><div class="line"></div><div class="line">UIView *button = nil;</div><div class="line">for (UIView *subView in self.superview.subviews) &#123;</div><div class="line">//判断事件的点是否在按钮上</div><div class="line">if ([subView isKindOfClass:[UIButton class]]) &#123;</div><div class="line">button =subView;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">CGPoint btnPoint = [self convertPoint:point toView:button];</div><div class="line">if ([button pointInside:btnPoint withEvent:event]) &#123;</div><div class="line">return button;</div><div class="line">&#125;else&#123;</div><div class="line">//此时代表事件触摸点不在button上，但是也不能写nil，写nil的话点击屏幕上的其他地方系统会寻找最合适的view，此时返回nil（ return nil;），则代表view不是最合适的view,那么此时点击屏幕上除了按钮之外的区域，最合适的view就是控制器上面的view</div><div class="line">return [super hitTest:point withEvent:event];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><p>要看完整Demo，地址为：<a href="https://github.com/FantasticLBP/BlogDemos/tree/master/hitTest的神奇效果（一）" title="hitTest的神奇效果" target="_blank" rel="external">https://github.com/FantasticLBP/BlogDemos/tree/master/hitTest的神奇效果（一）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hittest方法&quot;&gt;&lt;a href=&quot;#hittest方法&quot; class=&quot;headerlink&quot; title=&quot;hittest方法&quot;&gt;&lt;/a&gt;hittest方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;就是用来寻找最合适的view&lt;/li&gt;
&lt;li&gt;当一个事件传递给一个控件
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>事件响应者链</title>
    <link href="http://yoursite.com/2017/10/12/%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E8%80%85%E9%93%BE/"/>
    <id>http://yoursite.com/2017/10/12/事件响应者链/</id>
    <published>2017-10-12T02:49:55.000Z</published>
    <updated>2017-10-13T08:53:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>实验1:</p><p>定义 BaseView，在里面实现方法touchBegan，监听当前哪个类调用了该方法。</p><p>在控制器的界面上加5个颜色不同的view，每个view自定义view去实现，因此在不同的view上的手势就可以由不同的view拦截到。</p><p><img src="https://github.com/FantasticLBP/iOSKonwledge-Kit/blob/master/assets/Simulator%20Screen%20Shot%20-%20iPhone%206s%20Plus%20-%202017-10-11%20at%2010.14.37.png?raw=true" alt="UI效果图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//BaseView</div><div class="line">#import &quot;BaseView.h&quot;</div><div class="line"></div><div class="line">@implementation BaseView</div><div class="line">-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123;</div><div class="line">NSLog(@&quot;%@&quot;,[self class]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>结果：点击不同的View打印出不同的类名。</p><p>结论：</p><ul><li>触摸事件是从父控件传递到子控件的。</li><li>点击了绿色（图上的2级）的view：UIApplication-&gt; UIWindow -&gt; UIViewController的view -&gt; 绿色的view</li><li>点击了蓝色（图上的3级）的view：UIApplication-&gt; UIWindow -&gt; UIViewController的view -&gt; 红棕色的view -&gt; 蓝色的view</li><li>点击了黄色（图上的4级）的view：UIApplication -&gt; UIWindow -&gt; UIViewController的view -&gt; 红棕色的view -&gt; 蓝色的view -&gt; 黄色的view</li></ul><p>注意：如果父控件不能接收触摸事件，那么这个父控件的子控件也不能接收触摸事件</p><h4 id="如何找到最合适的控件来接收触摸事件？"><a href="#如何找到最合适的控件来接收触摸事件？" class="headerlink" title="如何找到最合适的控件来接收触摸事件？"></a>如何找到最合适的控件来接收触摸事件？</h4><ul><li>自己能否接收触摸事件？</li><li>触摸点是否在自己身上？</li><li>从后往前遍历子控件，重复前面2个步骤</li><li>如果没有符合条件的子控件，那么就自己最适合处理</li></ul><h1 id="事件响应原理"><a href="#事件响应原理" class="headerlink" title="事件响应原理"></a>事件响应原理</h1><p>产生的touch方法的默认做法是将事件顺着响应者链条向上传递，将事件交给上一个响应者处理。</p><h4 id="响应者链条"><a href="#响应者链条" class="headerlink" title="响应者链条"></a>响应者链条</h4><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/响应者链条.png" alt="响应者链条"></p><h4 id="事件传递的完整过程"><a href="#事件传递的完整过程" class="headerlink" title="事件传递的完整过程"></a>事件传递的完整过程</h4><ol><li>先将事件对象由上往下传递（父控件传递给子控件），找到最合适的控件来处理</li><li>调用最合适控件的touch方法</li><li>如果调用了[super touches…]方法就会将事件顺着响应者链条向上传递，传递给上一个响应者</li><li>接着就会调用上一个响应者的touches…方法</li></ol><h4 id="事件响应者"><a href="#事件响应者" class="headerlink" title="事件响应者"></a>事件响应者</h4><h5 id="如何判断该控件的上一个响应者？"><a href="#如何判断该控件的上一个响应者？" class="headerlink" title="如何判断该控件的上一个响应者？"></a>如何判断该控件的上一个响应者？</h5><ol><li>如果当前这个view是控制器的view，那么上一个响应者就是控制器</li><li>如果当前这个view不是控制器的view，那么上一个响应者就是父控件。</li></ol><p>事件传递给UIApplication后如果不处理的话，该事件会销毁掉。</p><p>控制器view上的子控件的touch…方法如果子控件不处理那么都会顺着响应者链条向上传递给上一层响应者对象，比如可以交给控制器处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实验1:&lt;/p&gt;
&lt;p&gt;定义 BaseView，在里面实现方法touchBegan，监听当前哪个类调用了该方法。&lt;/p&gt;
&lt;p&gt;在控制器的界面上加5个颜色不同的view，每个view自定义view去实现，因此在不同的view上的手势就可以由不同的view拦截到。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>iOS中的事件</title>
    <link href="http://yoursite.com/2017/10/12/iOS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/10/12/iOS中的事件/</id>
    <published>2017-10-12T02:48:39.000Z</published>
    <updated>2017-10-12T02:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>用户在使用App的时候会产生各种事件</li><li>触摸事件、重力加速计事件、远程遥控事件</li><li>只有继承自UIResponder才可以响应事件</li><li>UIView、UIApplication、UIViewController都可以响应事件</li><li><h2 id="UIResponder"><a href="#UIResponder" class="headerlink" title="UIResponder"></a>UIResponder</h2></li><li>UIResponder内部提供了一些方法处理事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//触摸事件</div><div class="line">-(void)touchBegan:(NSSet *)touches withEvent:(UIEvent *)event;</div><div class="line">-(void)touchMoved:(NSSet *)touches withEvent:(UIEvent *)event;</div><div class="line">-(void)touchEnded:(NSSet *)touches withEvent:(UIEvent *)event;</div><div class="line">-(void)touchCanceled:(NSSet *)touches withEvent:(UIEvent *)event;</div><div class="line"></div><div class="line">//加速计事件</div><div class="line">-(void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event;</div><div class="line">-(void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event;</div><div class="line">-(void)motionCanceled:(UIEventSubtype)motion withEvent:(UIEvent *)event;</div><div class="line"></div><div class="line">//远程控制事件</div><div class="line">-(void)remoteControlReceivedWithEvent:(UIEvent *)event;</div></pre></td></tr></table></figure><h1 id="事件的产生和传递"><a href="#事件的产生和传递" class="headerlink" title="事件的产生和传递"></a>事件的产生和传递</h1><ul><li>发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中去</li><li>UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常先分发事件给应用程序的主窗口（keyWindow）</li><li>主窗口会在视图层次结构中寻找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程中最重要的一步。</li></ul><p>找到合适的视图控件后，就会调用视图控件的touch方法来做具体的事件处理逻辑</p><h2 id="UIView不接收事件的3种情况"><a href="#UIView不接收事件的3种情况" class="headerlink" title="UIView不接收事件的3种情况"></a>UIView不接收事件的3种情况</h2><ol><li>不接收用户交互。view.userInteractionEnabled = NO</li><li>隐藏。view.hidden = YES</li><li>透明度很低。view.alpha = 0.0 ~ 0.01</li></ol><p>注意：UIImageView的userInteractionEnabled默认为NO，因此UIImageView及其它上面的子控件默认是不能接受触摸事件的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;用户在使用App的时候会产生各种事件&lt;/li&gt;
&lt;li&gt;触摸事件、重力加速计事件、远程遥控事件&lt;/li&gt;
&lt;li&gt;只有继承自UIResponder才可以响应事件&lt;/li&gt;
&lt;li&gt;UIView、UIApplication、UIViewController都可以响
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>抓包工具 - Charles初见</title>
    <link href="http://yoursite.com/2017/10/10/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7-Charles%E5%88%9D%E8%A7%81/"/>
    <id>http://yoursite.com/2017/10/10/抓包工具-Charles初见/</id>
    <published>2017-10-10T06:56:48.000Z</published>
    <updated>2017-10-10T06:58:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>一、 下载地址<br>Charles的下载地址：<a href="https://pan.baidu.com/s/1sl8bE93" target="_blank" rel="external">https://pan.baidu.com/s/1sl8bE93</a><br>因为Charles只有30天的试用期，所以在这里给一个破解版的包：<a href="https://pan.baidu.com/s/1cHtE0m" target="_blank" rel="external">https://pan.baidu.com/s/1cHtE0m</a><br>二、破解方法<br>1、像正常安装应用一样，点击安装，之后将应用包拖到Application目录中。<br>2、右击Charles.app，显示包内容，然后将第二个链接下载下来的破解包复制黏贴到此目录下替换。<br>三、使用教程<br>1、Charles上的设置。<br>    在Charles的菜单栏上选择”Proxy” -&gt; “Proxy Settings”,填入代理端口8888，并且勾选”Enable transparent HTTP proxying”,就完成了Charles上的设置，如下图所示：<br>    <img src="http://upload-images.jianshu.io/upload_images/2287777-6b827146b1c1cd36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>    <img src="http://upload-images.jianshu.io/upload_images/2287777-b2c552dfef180bd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>    2 、在电脑“系统偏好设置”中心打开网络查看本机ip地址，打开手机“设置”-&gt;“无线局域网”，进入选中的网络，HTTP代理选中“手动”。服务器处填写电脑ip地址，端口写8888。设置好后，我们打开iPhone上的任意需要网络通讯的程序，就可以看到Charles弹出请求的确认菜单，单击”Allow”按钮，即可完成设置。<br>    <img src="http://upload-images.jianshu.io/upload_images/2287777-5691a767f7f4c5b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre><code>例子：页面![](http://upload-images.jianshu.io/upload_images/2287777-f3aa893eddb3f79c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)抓包图![](http://upload-images.jianshu.io/upload_images/2287777-1b9e8848529d704b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)![](http://upload-images.jianshu.io/upload_images/2287777-be562c35ee4972d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、 下载地址&lt;br&gt;Charles的下载地址：&lt;a href=&quot;https://pan.baidu.com/s/1sl8bE93&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pan.baidu.com/s/1sl8bE93&lt;/a&gt;&lt;br
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>popstate事件在webkit中的诡异行为</title>
    <link href="http://yoursite.com/2017/10/10/popstate%E4%BA%8B%E4%BB%B6%E5%9C%A8webkit%E4%B8%AD%E7%9A%84%E8%AF%A1%E5%BC%82%E8%A1%8C%E4%B8%BA/"/>
    <id>http://yoursite.com/2017/10/10/popstate事件在webkit中的诡异行为/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、背景：同事去学校做毕设请假，今天帮他修改h5bug<br>2、遇到的问题：移动端App打开某个网页会自动弹出一个对话框，这个对话框出现的不合时宜，因为需要是在页面做一些操作后点击原生顶部的返回按钮再弹出对话框<br>3、具体问题就是<strong>popstate</strong>造成的</p><p>4、原来的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">window.addEventListener(&apos;popstate&apos;, function() &#123;</div><div class="line">var btnArray = [&apos;我要退出&apos;, &apos;继续计数&apos;];</div><div class="line">mui.confirm(&apos;正在计数哦，确定要退出吗？&apos;, &apos;提示&apos;, btnArray, function(e) &#123;</div><div class="line">if(e.index == 1) &#123;</div><div class="line">pushHistory();</div><div class="line">&#125; else &#123;</div><div class="line">setBack();</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">&#125;,false);</div></pre></td></tr></table></figure><p>5、修改后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">window.addEventListener(&apos;load&apos;, function() &#123;</div><div class="line">setTimeout(function() &#123;</div><div class="line">window.addEventListener(&apos;popstate&apos;, function() &#123;</div><div class="line">var btnArray = [&apos;我要退出&apos;, &apos;继续计数&apos;];</div><div class="line">mui.confirm(&apos;正在计数哦，确定要退出吗？&apos;, &apos;提示&apos;, btnArray, function(e) &#123;</div><div class="line">if(e.index == 1) &#123;</div><div class="line">pushHistory();</div><div class="line">&#125; else &#123;</div><div class="line">setBack();</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">&#125;);</div><div class="line">&#125;, 0);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>6、暂且先解决问题，日后有时间继续深入研究</p><p>研究一阵</p><p>7、说说过去</p><p>以前浏览器操作浏览器历史记录主要依据history对象。在它的<em>proto</em>继承有back、forward、go等函数，那么什么是popState？<strong>简而言之就是HTML5新增的用来控制浏览器历史记录的api。</strong></p><p>8、怎么用？</p><p>HTML5的新API扩展了window.history，使历史记录点更加开放了。可以存储当前历史记录点pushState、替换当前历史记录点replaceState、监听历史记录点popstate。</p><p>history.pushState(data,title,url);<br>//其中第一个参数data是给state的值；第二个参数title为页面的标题，但当前所有浏览器都忽略这个参数，传个空字符串就好；第三个参数url是你想要去的链接；</p><p>replaceState用法类似，例如：history.replaceState(“首页”,””,location.href+ “#web”);</p><p>两者区别：pushState会改变history.length，而replaceState不改变history.length</p><p>9、有坑吗？</p><p>popstate事件在webkit中的很诡异。popstate是HTML5的History系列中的事件，但是这玩意儿在webkit中的行为相当让人蛋疼。这回连IE10都站在了Firefox这边，至少这边的实用性强的多。虽然官方的文档中对popstate的描述也没有细节上的描述，不过以我的逻辑来判断，这货是就webkit的BUG。</p><p>Html5这套ApI和传统的history不同，或者说这套API是“session history entries”。</p><p>注意注意：Html5种的HistoryAPI是不会使页面跳转的，只是操作地址栏和相应的state属性而已，而且它是手动操作的。浏览器默认的History还是传统的那一套，虽然它们在浏览器上都使用同一个“历史记录堆栈”。</p><p>对这个差异的认知就是webkit中诡异行为的原因。webkit并没有把HTML5的History和传统的区分开，而根据官方文档对popstate的描述，只要访问历史记录就会触发popstate。而传统的History中访问页面和生产历史记录是同时的。所以在webkit中，无论是刷新还是访问一个新网页都会触发popstate。而其它浏览器中这个popstate仅作用于HTML5的History，并不响应传统的History，更不用说刷新和访问新网页的情况了。</p><p>原因找到了，那么解决方案呢？</p><p>1、对popstate延迟绑定的方法，因为popstate会在页面加载完成之后不久触发，所以在setTimeout一段时间后再绑定事件，popstate的第一次就不会轻易被webkit夺走了<br>2、判断浏览器再做调整，直接针对webkit在页面加载完成后第一次触发的popstate屏蔽了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、背景：同事去学校做毕设请假，今天帮他修改h5bug&lt;br&gt;2、遇到的问题：移动端App打开某个网页会自动弹出一个对话框，这个对话框出现的不合时宜，因为需要是在页面做一些操作后点击原生顶部的返回按钮再弹出对话框&lt;br&gt;3、具体问题就是&lt;strong&gt;popstate&lt;/s
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>模仿微信长按网页图片保存到相册</title>
    <link href="http://yoursite.com/2017/10/10/%E9%95%BF%E6%8C%89UIWebView%E4%B8%8A%E7%9A%84%E5%9B%BE%E7%89%87%E4%BF%9D%E5%AD%98%E5%88%B0%E7%9B%B8%E5%86%8C/"/>
    <id>http://yoursite.com/2017/10/10/长按UIWebView上的图片保存到相册/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:52:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="长按UIWebView上的图片保存到相册"><a href="#长按UIWebView上的图片保存到相册" class="headerlink" title="长按UIWebView上的图片保存到相册"></a>长按UIWebView上的图片保存到相册</h1><blockquote><p>不知道各位对于这个需求要如何解决？</p><p>可能有些人会想到js与原生交互，js监听图片点击事件，然后将图片的url传递给原生App端，然后原生App将图片保存到相册，这样子麻烦吗？超麻烦。（1）、js监听图片长按事件；（2）、js将图片url传递给原生；（3）、原生通过图片的url生成UIImage；（4）、保存UIImage到系统相册，巨麻烦啊，大哥，我很懒的好不好</p></blockquote><h4 id="那么问题跑出来了，怎么办最简单？"><a href="#那么问题跑出来了，怎么办最简单？" class="headerlink" title="那么问题跑出来了，怎么办最简单？"></a>那么问题跑出来了，怎么办最简单？</h4><ul><li><p>鉴于个人道行尚浅，我就将自己的想法说出来</p></li><li><p>有个js的api：<code>Document.elementFromPoint()</code></p></li></ul><blockquote><p>The<code>elementFromPoint()</code>method of the<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document" target="_blank" rel="external"><code>Document</code></a>interface returns the topmost element at the specified coordinates.</p></blockquote><p>所以根据这个提示，我们完全可以只在App原生端做一些代码开发，实现这个需求</p><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><p><em>给UIWebView添加长按手势</em>监听手势动作，拿到坐标点(x,y)<br><em>UIWebView注入js:Document.elementFromPoint(x,y).src拿到img标签的src</em>判断拿到的src是否有值，有值则代表点击的网页上的img标签，此时弹出对话框，是否保存到相册。如果src为空，则代表点击网页上的非img标签，则不需要弹出对话框。<br>*拿到图片的url，生成UIImage。再将图片保存到相册</p><h4 id="有巨坑"><a href="#有巨坑" class="headerlink" title="有巨坑"></a>有巨坑</h4><ul><li>长按手势事件不能每次都响应，据我猜测UIWebView本身就有很多事件，所以实现下UIGestureRecognizerDelegate代理方法。长按手势准确率100%</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer&#123;</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  ViewController.m</div><div class="line">//  WebView长按图片保存到相册</div><div class="line">//</div><div class="line">//  Created by 杭城小刘 on 2017/8/2.</div><div class="line">//  Copyright © 2017年 杭城小刘. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()&lt;UIGestureRecognizerDelegate,NSURLSessionDelegate&gt;</div><div class="line">@property (weak, nonatomic) IBOutlet UIWebView *webView;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">#pragma mark -- life cycle</div><div class="line">- (void)viewDidLoad&#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    NSString *htmlURL = [[NSBundle mainBundle] pathForResource:@&quot;saveImage&quot; ofType:@&quot;html&quot;];</div><div class="line">    [self.webView loadRequest:[NSURLRequest requestWithURL:[NSURL fileURLWithPath:htmlURL]]];</div><div class="line">    //给UIWebView添加手势</div><div class="line">    UILongPressGestureRecognizer* longPressed = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPressed:)];</div><div class="line">    longPressed.delegate = self;</div><div class="line">    [self.webView addGestureRecognizer:longPressed];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark -- UIGestureRecognizerDelegate</div><div class="line">- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer&#123;</div><div class="line">    UIActivityTypeAddToReadingList</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)longPressed:(UILongPressGestureRecognizer*)recognizer&#123;</div><div class="line">    if (recognizer.state != UIGestureRecognizerStateBegan) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    CGPoint touchPoint = [recognizer locationInView:self.webView];</div><div class="line">    NSString *imgURL = [NSString stringWithFormat:@&quot;document.elementFromPoint(%f, %f).src&quot;, touchPoint.x, touchPoint.y];</div><div class="line">    NSString *urlToSave = [self.webView stringByEvaluatingJavaScriptFromString:imgURL];</div><div class="line">    if (urlToSave.length == 0) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    UIAlertController *alertVC =  [UIAlertController alertControllerWithTitle:@&quot;大宝贝儿&quot; message:@&quot;你真的要保存图片到相册吗？&quot; preferredStyle:UIAlertControllerStyleAlert];</div><div class="line">    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@&quot;真的啊&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</div><div class="line">            [self saveImageToDiskWithUrl:urlToSave];</div><div class="line">    &#125;];</div><div class="line">    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;大哥，我点错了，不好意思&quot; style:UIAlertActionStyleDefault handler:nil];</div><div class="line">    [alertVC addAction:okAction];</div><div class="line">    [alertVC addAction:cancelAction];</div><div class="line">    [self presentViewController:alertVC animated:YES completion:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - private method</div><div class="line">- (void)saveImageToDiskWithUrl:(NSString *)imageUrl&#123;</div><div class="line">    NSURL *url = [NSURL URLWithString:imageUrl];</div><div class="line">    </div><div class="line">    NSURLSessionConfiguration * configuration = [NSURLSessionConfiguration defaultSessionConfiguration];</div><div class="line">    </div><div class="line">    NSURLSession *session = [NSURLSession sessionWithConfiguration:configuration delegate:self delegateQueue:[NSOperationQueue new]];</div><div class="line">    </div><div class="line">    NSURLRequest *imgRequest = [NSURLRequest requestWithURL:url cachePolicy:NSURLRequestReturnCacheDataElseLoad timeoutInterval:30.0];</div><div class="line">    </div><div class="line">    NSURLSessionDownloadTask  *task = [session downloadTaskWithRequest:imgRequest completionHandler:^(NSURL * _Nullable location, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</div><div class="line">        if (error) &#123;</div><div class="line">            return ;</div><div class="line">        &#125;</div><div class="line">        NSData * imageData = [NSData dataWithContentsOfURL:location];</div><div class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">            </div><div class="line">            UIImage * image = [UIImage imageWithData:imageData];</div><div class="line">            UIImageWriteToSavedPhotosAlbum(image, self, @selector(imageSavedToPhotosAlbum:didFinishSavingWithError:contextInfo:), NULL);</div><div class="line">        &#125;);</div><div class="line">    &#125;];</div><div class="line">    [task resume];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark 保存图片后的回调</div><div class="line">- (void)imageSavedToPhotosAlbum:(UIImage*)image didFinishSavingWithError:  (NSError*)error contextInfo:(id)contextInfo&#123;</div><div class="line">    NSString*message =@&quot;嘿嘿&quot;;</div><div class="line">    if(!error) &#123;</div><div class="line">        UIAlertController *alertControl = [UIAlertController alertControllerWithTitle:@&quot;提示&quot; message:@&quot;成功保存到相册&quot; preferredStyle:UIAlertControllerStyleAlert];</div><div class="line">        </div><div class="line">        UIAlertAction *action = [UIAlertAction actionWithTitle:@&quot;确定&quot; style:UIAlertActionStyleDestructive handler:nil];</div><div class="line">        [alertControl addAction:action];</div><div class="line">        [self presentViewController:alertControl animated:YES completion:nil];</div><div class="line">    &#125;else&#123;</div><div class="line">        message = [error description];</div><div class="line">        UIAlertController *alertControl = [UIAlertController alertControllerWithTitle:@&quot;提示&quot; message:message preferredStyle:UIAlertControllerStyleAlert];</div><div class="line">        UIAlertAction *action = [UIAlertAction actionWithTitle:@&quot;确定&quot; style:UIAlertActionStyleCancel handler:nil];</div><div class="line">        [alertControl addAction:action];</div><div class="line">        [self presentViewController:alertControl animated:YES completion:nil];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><p>附上关键的js官方文档：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint" target="_blank" rel="external">Document.elementFromPoint()</a></p><p>附上Demo：<a href="https://github.com/FantasticLBP/BlogDemos" target="_blank" rel="external">Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;长按UIWebView上的图片保存到相册&quot;&gt;&lt;a href=&quot;#长按UIWebView上的图片保存到相册&quot; class=&quot;headerlink&quot; title=&quot;长按UIWebView上的图片保存到相册&quot;&gt;&lt;/a&gt;长按UIWebView上的图片保存到相册&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>1个月实现1个iOS客户端+后台服务端</title>
    <link href="http://yoursite.com/2017/10/10/1%E4%B8%AA%E6%9C%88%E5%AE%9E%E7%8E%B01%E4%B8%AAiOS%E5%AE%A2%E6%88%B7%E7%AB%AF+%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <id>http://yoursite.com/2017/10/10/1个月实现1个iOS客户端+后台服务端/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hotels"><a href="#Hotels" class="headerlink" title="Hotels"></a>Hotels</h1><p>住哪儿App</p><p><img src="https://github.com/FantasticLBP/Hotels/blob/master/住哪儿/Assets.xcassets/AppIcon.appiconset/11.png?raw=true" alt="AppLogo" title="这是App的Logo"></p><p><strong>实现了类似艺龙App的预定酒店功能，包括酒店搜索、特色酒店推荐、特惠酒店推荐等等功能，可以预定酒店、查看订单，唯独不能支付（支付功能必须由公司的名义注册，个人练手注册不了）。</strong></p><ul>包括iOS开发的常见功能：<br><li>自定义NavigationController实现全屏右滑返回上一控制器的LBPNavigationController</li><br><li>自定义UIScrollView实现全屏滑动显示不同控制器的LBPScrollSegmentView</li><br><li>封装网络访问类AFNetPackage，具备检查网络状态、JSON方式获取数据、xml方式获取数据、post、get、delete、文件下载、文件上传等功能</li><br><li>UITableview上拉加载、下面刷新功能;UITableView潜逃UICollecionView展现界面，事件、数据等通过Delegate处理</li><br><li>Masonry自动布局库的使用</li><br><li>封装好的启动欢迎页</li><br><li>个人信息持久化保存</li><br><li>复杂界面的布局纯代码实现</li><br><li>cell的重用内存优化</li><br><li>自定义URL Schemes便于其他App或者网页唤起；方便App或者网页传递参数</li><br><li>工程结构一幕了然，便于拓展</li><br><li>界面采用代码实现，部分界面采用xib实现。整个代码可读性比较好、代码规范、有注释说明，配合服务端是自己用php写的，Api也是php实现的。</li><br><li>主要功能：根据不同主题查找酒店、摇一摇随机推荐酒店、根据城市定位推荐酒店、根据用户输入多条件模糊搜索查找酒店、酒店位置地图显示、路径规划及其导航（百度地图、高德地图、系统地图）、订单查看等、酒店分享等功能</li><br></ul><h3>效果截图</h3><p><img src="https://raw.githubusercontent.com/FantasticLBP/Hotels/master/1.gif" alt="App效果图" title="这是App的效果图"></p><p>ToDo：后期可能会实现MVVM框架，将RAC技术应用到工程中去。一些容易变的页面采用Html5实现，比如”发现模块”的特色酒店。</p><h3>福利</h3><p></p><p>如果想了解服务端开发以及App与服务端交互（也就是接口开发）可以看看这个App的后台代码。 </p><p></p><h3>住哪儿App的后台管理功能，包括主题酒店、特色酒店发布、注册用户的统计查看、订单的统计查看、酒店的统计查看。Controller目录下的Api下就是给App开发的api。想写api的童鞋们可以看看。</h3><br><ul>包括php系统开发的常见功能：<br><li>复杂表单的提交，包括多图片上传</li><br><li>基于Bootstrap框架的界面布局</li><br><li>封装PDO数据库操作类，实现增删改查等等常见功能，调用简单</li><br><li>随机酒店推荐策略</li><br><li>多条件模糊搜索酒店算法</li><br><li>jquery表格插件Datatables的使用大大丰富了数据的展现方式，更具交互性。具有自动分页、模糊搜索等功能</li><br><li>封装了Response类，可以传递4个参数 show($code, $message = ‘’, $data = array(), $type = self::JSON)来展示json或者array或者xml。</li><br><li>工程结构一幕了然，便于拓展</li><br></ul><br><br><h3>效果截图</h3><p><img src="https://github.com/FantasticLBP/Hotels_Server/blob/master/Systemt_Screen1.png?raw=true" alt="系统截图" title="这是系统截图"></p><p>如果有不懂的地方可以加入QQ交流群讨论：515066271。这个QQ群讨论技术范围包括：iOS、H5混合开发、前端开发、PHP开发，欢迎大家讨论技术。</p><p>最后奉上项目地址，全部开源</p><p><a href="https://github.com/FantasticLBP/Hotels" target="_blank" rel="external">住哪儿App客户端</a></p><p><a href="https://github.com/FantasticLBP/Hotels_Server" target="_blank" rel="external">住哪儿后台服务端</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hotels&quot;&gt;&lt;a href=&quot;#Hotels&quot; class=&quot;headerlink&quot; title=&quot;Hotels&quot;&gt;&lt;/a&gt;Hotels&lt;/h1&gt;&lt;p&gt;住哪儿App&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/FantasticLB
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>iOS程序员利用分页和模糊查询技术实现一个App接口</title>
    <link href="http://yoursite.com/2017/10/10/iOS%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%A9%E7%94%A8%E5%88%86%E9%A1%B5%E5%92%8C%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAApp%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2017/10/10/iOS程序员利用分页和模糊查询技术实现一个App接口/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:52:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 模糊查询技术、分页技术、App接口</p><p>1、分页问题</p><pre><code>关键技术点：php执行sql语句。示例：“SELECT * FROM hotel WHERE subject=&apos;10&apos; and address like &apos;%杭州%&apos; LIMIT 0,4”。注意：LIMIT后需要跟2个数字，1个是起始位置，2是结束位置。</code></pre><p>   可以对limit函数进行封装：select <em>from user limit (page-1)</em>size,page*size;</p><pre><code>单例模式编写App接口的注意点：（1）、php后台获取参数，之后根据参数转换成SQL语句；（2）、php执行SQL语句，将结果转换成JSON，返回给客户端</code></pre><p>2、模糊搜索</p><pre><code>SQL匹配模式（开发中应用最多的一种）：</code></pre><p>   （1）、使用SQL匹配模式，不能使用操作符 = 或 != ，而是使用操作符LIKE或者NOT LIKE</p><p>   （2）、使用SQL匹配模式，MySQL提供了2种通配符。</p><pre><code>%:表示任意数量的任意字符（包括0个）_:表示任意的单个字符例子：u_name为“张三”，“张猫三”、“三脚猫”，“唐三藏”。如果要找回包含“三”和“猫”的纪录     “select *from user where u_name LIKE &apos;%三%&apos; and u_name LIKE &apos;%猫%&apos;;     若使用“select *from user where u_name LIKE &apos;%三%猫%&apos;;”只能找出：三脚猫</code></pre><p>   （3）、使用SQL匹配模式，如果匹配格式当中不包含以上2种通配符中的任意1个，其查询效果等同于= 或 !=</p><p>   （4）、使用SQL匹配模式，默认情况下是不区分大小写的</p><p>   正则表达式匹配模式（不推荐）：</p><pre><code>（1）、 []:表示括号内所列字符中的一个：指定一个字符、字符串或范围，要求所匹配对象为它们中的任意一个    比如 SELECT * FROM [user] WHERE u_name LIKE &apos;[张李王]三&apos;。将找出“张三”、“李三”、“王三”（而不是“张李王三”）；    比如[ ] 内有一系列字符（01234、abcde之类的）则可略写为“0-4”、“a-e”。SELECT * FROM [user] WHERE u_name LIKE &apos;老[1-9]&apos;-&gt; 将找出“老1”、“老2”、……、“老9”；（2）、[^]:表示不在括号所列之内的单个字符。其取值和[]相同，要求匹配对象为指定字符以外的任意一个字符  比如 SELECT * FROM [user] WHERE u_name LIKE &apos;[^张李王]三&apos;。将找出不姓“张”、“李”、“王”的“赵三”、“孙三”等</code></pre><p>  （3）、.:匹配任意的单个字符</p><p>   （4）、^:表示以某个字符或字符串开头。^a:以a开头</p><p>   （5）、$:表示以某个字符或字符串结尾。s$:以s结尾</p><p>   （6）、*:匹配0个或多个在它前面的字符</p><p>使用正则表达式匹配的操作符是：REGEXP和NOT REGEXP（RLIKE或NOT RLIKE）</p><p>注意啊：正则表达式和SQl匹配模式工作原理不一样：正则只要匹配出符合条件就马上算成功；而SQl需要严格匹配。比如同样需要写从酒店表中拿出地址中包含“杭州”的酒店</p><p>SQL:SELECT *FROM hotel WHERE address LIKE ‘%杭州%’;</p><p>正则：SELECT <em>FROM hotel WHERE address REGEXP ‘^[杭][州]</em>’;</p><p>需要特别注意的是：如果所查询的内容包含通配符时，导致我们查询”%”,”_”,”[“的语句无法正常实现。因此我们需要特殊处理。</p><p>需要特别注意的是：如果所查询的内容包含通配符时，导致我们查询”%”,”_”,”[“的语句无法正常实现。因此我们需要特殊处理。</p><pre><code>function sql_encode($sql){  $sql = replace($sql,&quot;[&quot;,&quot;[[]&quot;);  $sql = replace($sql,&quot;%&quot;,&quot;[%]&quot;);  $sql = replace($sql,&quot;_&quot;,&quot;[_]&quot;);  return $sql;}</code></pre><p>最后贴一个利用模糊查询实现分页查询的接口。</p><pre><code>&lt;?php/** * Created by PhpStorm. * User: geek * Date: 2017/2/20 * Time: 上午9:15 */header(&apos;content-type:text.html;charset=utf-8&apos;);error_reporting(0);require_once &apos;../../model/PdoMySQL.class.php&apos;;require_once &apos;../../model/config.php&apos;;require_once &apos;Response.php&apos;;class HotelList{    private $tableName = &quot;hotel&quot;;    private $telephone = &quot;&quot;;    private $cityName= &quot;&quot;;    private $subjectId = &quot;&quot;;    private $page = 0;    private $size = 0;    protected static $_instance = null;    protected function  __construct()    {    }    protected function  __clone()    {        // TODO: Implement __clone() method.    }    public function  getInstance()    {        if (self::$_instance === null) {            self::$_instance = new self();        }        return self::$_instance;    }    function getHotels()    {        self.$this-&gt;telephone = $_REQUEST[&quot;telephone&quot;];        self.$this-&gt;subjectId = $_REQUEST[&quot;subjectId&quot;];        self.$this-&gt;cityName = $_REQUEST[&quot;cityName&quot;];        self.$this-&gt;page = $_REQUEST[&quot;page&quot;];        self.$this-&gt;size = $_REQUEST[&quot;size&quot;];        $mysqlPdo = new PdoMySQL();        if($this-&gt;telephone == &quot;&quot;){            Response::show(201,&quot;fail&quot;,&quot;非安全的数据请求&quot;,&quot;json&quot;);        }        $userRows = $mysqlPdo-&gt;find(&quot;user&quot;,&quot;telephone=&apos;$this-              &gt;telephone&apos;&quot;);        if($userRows[0][&quot;telephone&quot;] != $this-&gt;telephone){            Response::show(201,&quot;fail&quot;,&quot;非安全的数据请求&quot;,&quot;json&quot;);        }        $city = str_replace(&quot;市&quot;,&quot;&quot;,$this-&gt;cityName);        $allrows = $mysqlPdo-&gt;find($this-&gt;tableName,&quot;subject=&apos;$this-&gt;subjectId&apos; and address like &apos;%$city%&apos;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,[(intval($this-&gt;page)-1)*intval($this-&gt;size),intval($this-&gt;page)*intval($this-&gt;size)]);        Response::show(200,&apos;酒店列表获取成功&apos;,$allrows,&apos;json&apos;);    }}$lister = HotelList::getInstance();$lister-&gt;getHotels();</code></pre><p>其中：Respone和PdoMySQL的2个类分别是接口数据展示的类和PDO操作的一个封装。</p><p>如果有需要请留下邮箱。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要: 模糊查询技术、分页技术、App接口&lt;/p&gt;
&lt;p&gt;1、分页问题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;关键技术点：php执行sql语句。示例：“SELECT * FROM hotel WHERE subject=&amp;apos;10&amp;apos; and address like
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>-last-child与-last-of-type你只是会用，有研究过区别吗？</title>
    <link href="http://yoursite.com/2017/10/10/-last-child%E4%B8%8E-last-of-type%E4%BD%A0%E5%8F%AA%E6%98%AF%E4%BC%9A%E7%94%A8%EF%BC%8C%E6%9C%89%E7%A0%94%E7%A9%B6%E8%BF%87%E5%8C%BA%E5%88%AB%E5%90%97%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/10/10/-last-child与-last-of-type你只是会用，有研究过区别吗？/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:48:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="last-child与-last-of-type"><a href="#last-child与-last-of-type" class="headerlink" title=":last-child与:last-of-type"></a>:last-child与:last-of-type</h1><blockquote><p>同学们遇到过给同一组元素的最后一个元素设置css失效的情况吗？我遇到过，当时使用:last-child居然不起作用，看到名字不科学啊，明明是“最后一个元素”，那为什么设置CSS失效呢？今天来一探究竟吧</p></blockquote><ul><li>先看一组<code>:last-child</code>正常工作的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">        &lt;title&gt;:last-child、:last-of-type&lt;/title&gt;</div><div class="line">        &lt;script src=&quot;../../lib/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;</div><div class="line">        &lt;style&gt;</div><div class="line">            ul &#123;</div><div class="line">                margin: 100px 0;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            li &#123;</div><div class="line">                list-style: circle;</div><div class="line">                border-bottom: 1px solid #000000;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            li:last-child &#123;</div><div class="line">                border-color: red;</div><div class="line">            &#125;</div><div class="line">        &lt;/style&gt;</div><div class="line"></div><div class="line">    &lt;/head&gt;</div><div class="line"></div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;1&lt;/li&gt;</div><div class="line">            &lt;li&gt;2&lt;/li&gt;</div><div class="line">            &lt;li&gt;3&lt;/li&gt;</div><div class="line">            &lt;!--&lt;p&gt;我是来骚扰的&lt;/p&gt;--&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/FantasticLBP/web/master/assets/屏幕快照%202017-06-17%20下午4.56.03.png" alt="效果图1" title="效果图1"></p><ul><li>再先看一组<code>:last-child</code>不正常工作的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">        &lt;title&gt;:last-child、:last-of-type&lt;/title&gt;</div><div class="line">        &lt;script src=&quot;../../lib/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;</div><div class="line">        &lt;style&gt;</div><div class="line">            ul &#123;</div><div class="line">                margin: 100px 0;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            li &#123;</div><div class="line">                list-style: circle;</div><div class="line">                border-bottom: 1px solid #000000;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            li:last-child &#123;</div><div class="line">                border-color: red;</div><div class="line">            &#125;</div><div class="line">        &lt;/style&gt;</div><div class="line"></div><div class="line">    &lt;/head&gt;</div><div class="line"></div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;1&lt;/li&gt;</div><div class="line">            &lt;li&gt;2&lt;/li&gt;</div><div class="line">            &lt;li&gt;3&lt;/li&gt;</div><div class="line">            &lt;p&gt;我是来骚扰的&lt;/p&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><img src="https://github.com/FantasticLBP/web/blob/master/assets/屏幕快照%202017-06-17%20下午4.57.23.png?raw=true" alt="效果图2" title="效果图2"></p><p>问题抛出来了，那么来研究下:last-child和:last-of-type究竟是何方神圣。</p><ol><li><p>:last-child：<strong>The last-child CSS pseudo-class represents the last element among a group of sibling elements.（:last-child这个css伪类代表的一组兄弟元素当中最后一个元素）但经过代码发现，它说的一组元素应该是指其父元素的所有子元素且类型为:last-child前面指定的类型的一组元素。</strong></p></li><li><p>:last-of-type：<strong>The last-of-type CSS pseudo-class represents the last element of its type among a group of sibling elements.（</strong>:last-of-type这个css伪类代表其类型的一组兄弟元素中的最后一个元素<strong>）所以它指的是和</strong>:last-of-type前面的元素类型一致的一组元素的最后一个元素</p></li></ol><p>同理：:nth-last-child和:nth-last-of-type的区别在于父元素的子元素中且与:nth-last-child前面的元素类型一致的最后一个元素</p><p>做个验证</p><ul><li>:nth-last-child可以正常工作的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;:last-child、:last-of-type&lt;/title&gt;</div><div class="line">&lt;script src=&quot;../../lib/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;style&gt;</div><div class="line">ul &#123;</div><div class="line">margin: 100px 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">li &#123;</div><div class="line">list-style: circle;</div><div class="line">border-bottom: 1px solid #000000;</div><div class="line">&#125;</div><div class="line">li:nth-last-child(1)&#123;</div><div class="line">border-color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;1&lt;/li&gt;</div><div class="line">&lt;li&gt;2&lt;/li&gt;</div><div class="line">&lt;li&gt;3&lt;/li&gt;</div><div class="line">&lt;!--&lt;p&gt;我是来骚扰的&lt;/p&gt;--&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><img src="https://github.com/FantasticLBP/web/blob/master/assets/屏幕快照%202017-06-17%20下午5.25.01.png?raw=true" alt="效果图3" title="效果图3"></p><ul><li>:nth-last-child不能正常工作的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"> &lt;html&gt;</div><div class="line"> &lt;head&gt;</div><div class="line"> &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line"> &lt;title&gt;:last-child、:last-of-type&lt;/title&gt;</div><div class="line"> &lt;script src=&quot;../../lib/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;</div><div class="line"> &lt;style&gt;</div><div class="line"> ul &#123;</div><div class="line"> margin: 100px 0;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> li &#123;</div><div class="line"> list-style: circle;</div><div class="line"> border-bottom: 1px solid #000000;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"> li:nth-last-child(1)&#123;</div><div class="line"> border-color: red;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> &lt;/style&gt;</div><div class="line"></div><div class="line"> &lt;/head&gt;</div><div class="line"></div><div class="line"> &lt;body&gt;</div><div class="line"> &lt;ul&gt;</div><div class="line"> &lt;li&gt;1&lt;/li&gt;</div><div class="line"> &lt;li&gt;2&lt;/li&gt;</div><div class="line"> &lt;li&gt;3&lt;/li&gt;</div><div class="line"> &lt;p&gt;我是来骚扰的&lt;/p&gt;</div><div class="line"> &lt;/ul&gt;</div><div class="line"> &lt;/body&gt;</div><div class="line"></div><div class="line"> &lt;/html&gt;</div></pre></td></tr></table></figure><p><img src="https://github.com/FantasticLBP/web/blob/master/assets/屏幕快照%202017-06-17%20下午4.57.23.png?raw=true" alt="效果图2" title="效果图2"></p><ul><li>接下来:nth-last-of-type闪亮登场</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;:last-child、:last-of-type&lt;/title&gt;</div><div class="line">&lt;script src=&quot;../../lib/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;style&gt;</div><div class="line">ul &#123;</div><div class="line">margin: 100px 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">li &#123;</div><div class="line">list-style: circle;</div><div class="line">border-bottom: 1px solid #000000;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">li:nth-last-of-type(1)&#123;</div><div class="line">border-color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;1&lt;/li&gt;</div><div class="line">&lt;li&gt;2&lt;/li&gt;</div><div class="line">&lt;li&gt;3&lt;/li&gt;</div><div class="line">&lt;p&gt;我是来骚扰的&lt;/p&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><img src="https://github.com/FantasticLBP/web/blob/master/assets/屏幕快照%202017-06-17%20下午5.25.01.png?raw=true" alt="效果图3" title="效果图3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;last-child与-last-of-type&quot;&gt;&lt;a href=&quot;#last-child与-last-of-type&quot; class=&quot;headerlink&quot; title=&quot;:last-child与:last-of-type&quot;&gt;&lt;/a&gt;:last-child与:
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>NSFileManager终极杀手个App接口</title>
    <link href="http://yoursite.com/2017/10/10/NSFileManager%E7%BB%88%E6%9E%81%E6%9D%80%E6%89%8B/"/>
    <id>http://yoursite.com/2017/10/10/NSFileManager终极杀手/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:53:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NSFileManager"><a href="#NSFileManager" class="headerlink" title="NSFileManager"></a>NSFileManager</h1><blockquote><p>想操作文件，该去了解下NSFileManager</p></blockquote><p>注意：//小窍门：打印数组或者字典，里面包含中文，直接用%@打印会看不到中文，可用for遍历访问</p><ul><li>单例方法得到文件管理者对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSFileManager *fileManager = [NSFileManager defaultManager];</div></pre></td></tr></table></figure><ul><li>判断是否存在指定的文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#define LogBool(value) NSLog(@&quot;%@&quot;,value==YES?@&quot;YES&quot;:@&quot;NO&quot;);</div><div class="line"></div><div class="line">   NSString *filepath = @&quot;/Users/geek/Desktop/data.plist&quot;;</div><div class="line">   BOOL res = [fileManager fileExistsAtPath:filepath];</div><div class="line">   LogBool(res)</div></pre></td></tr></table></figure><ul><li>根据给出的文件路径判断是否存在文件，且判断路径是文件还是文件夹</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NSString *filepath1 = @&quot;/Users/geek/Desktop/data.plist&quot;;</div><div class="line">    BOOL isDirectory = NO;</div><div class="line">    BOOL isExist =  [fileManager fileExistsAtPath:filepath1 isDirectory:&amp;isDirectory];</div><div class="line">    if (isExist) &#123;</div><div class="line">        NSLog(@&quot;文件存在&quot;);</div><div class="line">        if (isDirectory) &#123;</div><div class="line">            NSLog(@&quot;文件夹路径&quot;);</div><div class="line">        &#125;else&#123;</div><div class="line">            NSLog(@&quot;文件路径&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;else&#123;</div><div class="line">        NSLog(@&quot;给定的路径不存在&quot;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li>判断文件或者文件夹是否可以读取</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//这是一个系统文件（不可读）</div><div class="line"> NSString *filePath2 = @&quot;/.DocumentRevisions-V100 &quot;;</div><div class="line"> BOOL isReadable = [fileManager isReadableFileAtPath:filePath2];</div><div class="line"> if (isReadable) &#123;</div><div class="line">     NSLog(@&quot;文件可读取&quot;);</div><div class="line"> &#125; else &#123;</div><div class="line">     NSLog(@&quot;文件不可读取&quot;);</div><div class="line"> &#125;</div></pre></td></tr></table></figure><ul><li>判断文件是否可以写入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//系统文件不可写入</div><div class="line">   BOOL isWriteAble =  [fileManager isWritableFileAtPath:filePath2];</div><div class="line">   if (isWriteAble) &#123;</div><div class="line">       NSLog(@&quot;文件可写入&quot;);</div><div class="line">   &#125; else &#123;</div><div class="line">       NSLog(@&quot;文件不可写入&quot;);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><ul><li>判断文件是否可以删除</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//系统文件不可删除</div><div class="line">   BOOL isDeleteAble =  [fileManager isDeletableFileAtPath:filePath2];</div><div class="line">    if (isDeleteAble) &#123;</div><div class="line">        NSLog(@&quot;文件可以删除&quot;);</div><div class="line">    &#125; else &#123;</div><div class="line">        NSLog(@&quot;文件不可删除&quot;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li>获取文件信息<br><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-07-02%20下午5.58.38.png" alt="文件信息" title="文件信息"></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> NSError *error = nil;</div><div class="line">    NSDictionary *fileInfo =  [fileManager attributesOfItemAtPath:filepath1 error:&amp;error];</div><div class="line">//    NSLog(@&quot;文件信息:%@,错误信息:%@&quot;,fileInfo,error);</div><div class="line">    NSLog(@&quot;文件大小:%@&quot;,fileInfo[NSFileSize]);</div></pre></td></tr></table></figure><ul><li>获取指定目录下的所有目录（列出所有的文件和文件夹）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSString *filePath3 = @&quot;/Users/geek/desktop&quot;;</div><div class="line">    NSArray *subs = [fileManager subpathsAtPath:filePath3];</div><div class="line">    NSLog(@&quot;Desktop目录下所有的所有文件和文件夹&quot;);</div><div class="line">    //小窍门：打印数组或者字典，里面包含中文，直接用%@打印会看不到中文，可用for遍历访问</div><div class="line">    for (NSString *item in subs) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;,item);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li>获取指定目录下的子目录和文件（不包含子孙）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSError *erroe = nil;</div><div class="line">    NSArray *children =  [fileManager contentsOfDirectoryAtPath:filePath3 error:&amp;erroe];</div><div class="line">    NSLog(@&quot;Desktop目录下的文件和文件夹&quot;);</div><div class="line">    for (NSString *item in children) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;,item);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li>在指定目录创建文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">NSString *filePath1 = @&quot;/Users/geek/Desktop/data.text&quot;;</div><div class="line">NSData *data = [@&quot;我要学好OC&quot; dataUsingEncoding:NSUTF8StringEncoding];</div><div class="line">BOOL createFile =  [fileManager createFileAtPath:filePath1 contents:data attributes:nil];</div><div class="line">if (createFile) &#123;</div><div class="line">    NSLog(@&quot;文件创建成功&quot;);</div><div class="line">&#125; else &#123;</div><div class="line">    NSLog(@&quot;文件创建失败&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在指定目录创建文件夹（参数说明：withIntermediateDirectories后的参数为Bool代表。YES：一路创建；NO：不会做一路创建）</li></ul><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-07-02%20下午7.02.53.png" alt="正常创建文件夹成功" title="正常创建文件夹成功"><br><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-07-02%20下午7.07.55.png" alt="创建文件夹失败" title="创建文件夹失败"></p><p>设置一路创建为NO，如果文件夹不存在则停止创建文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">NSString *filePath2 = @&quot;/Users/geek/Desktop/海贼王&quot;;</div><div class="line">NSError *error = nil;</div><div class="line">BOOL createDirectory = [fileManager createDirectoryAtPath:filePath2 withIntermediateDirectories:NO attributes:nil error:&amp;error];</div><div class="line">if (createDirectory) &#123;</div><div class="line">    NSLog(@&quot;文件夹创建成功&quot;);</div><div class="line">&#125; else &#123;</div><div class="line">    NSLog(@&quot;文件夹创建失败，原因：%@&quot;,error);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//一路创建失败（文件夹不存在就不创建）</div><div class="line">  NSString *filePath3 = @&quot;/Users/geek/Desktop/海贼王&quot;;</div><div class="line">BOOL createDirectory1 = [fileManager createDirectoryAtPath:filePath3 withIntermediateDirectories:NO attributes:nil error:&amp;error];</div><div class="line">if (createDirectory1) &#123;</div><div class="line">    NSLog(@&quot;文件夹创建成功&quot;);</div><div class="line">&#125; else &#123;</div><div class="line">    NSLog(@&quot;文件夹创建失败，原因：%@&quot;,error);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>复制文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">NSString *filePath4 = @&quot;/Users/geek/Desktop/动漫&quot;;</div><div class="line"></div><div class="line"> BOOL copyRes = [fileManager copyItemAtPath:filePath3 toPath:filePath4 error:nil];</div><div class="line"> if (copyRes) &#123;</div><div class="line">     NSLog(@&quot;文件复制成功&quot;);</div><div class="line"> &#125; else &#123;</div><div class="line">     NSLog(@&quot;文件复制失败&quot;);</div><div class="line"> &#125;</div></pre></td></tr></table></figure><ul><li>移动文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSString *filePath5 = @&quot;/Users/geek/Downloads/动漫&quot;;</div><div class="line">  BOOL moveRes = [fileManager moveItemAtPath:filePath3 toPath:filePath5 error:nil];</div><div class="line">  if (moveRes) &#123;</div><div class="line">      NSLog(@&quot;文件移动成功&quot;);</div><div class="line">  &#125; else &#123;</div><div class="line">      NSLog(@&quot;文件移动失败&quot;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><ul><li>可以给文件重命名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//可以给文件重命名</div><div class="line">   NSString *filePath6 = @&quot;/Users/geek/Downloads/卡通&quot;;</div><div class="line">   [fileManager moveItemAtPath:filePath5 toPath:filePath6 error:nil];</div></pre></td></tr></table></figure><ul><li>删除文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BOOL deleteRes = [fileManager removeItemAtPath:filePath6 error:nil];</div><div class="line">if (deleteRes) &#123;</div><div class="line">    NSLog(@&quot;文件删除成功&quot;);</div><div class="line">&#125; else &#123;</div><div class="line">    NSLog(@&quot;文件删除失败&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="NSFileManager小病毒"><a href="#NSFileManager小病毒" class="headerlink" title="NSFileManager小病毒"></a>NSFileManager小病毒</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//单例方法得到文件管理者对象</div><div class="line">   NSFileManager *fileManager = [NSFileManager defaultManager];</div><div class="line">   NSString *filePath = @&quot;/Users/geek/desktop/delete/&quot;;</div><div class="line">   while (1) &#123;</div><div class="line">       //判断该文件路径是否存在</div><div class="line">       BOOL exist = [fileManager fileExistsAtPath:filePath];</div><div class="line">       if (exist) &#123;</div><div class="line">           //找出该路径下的所有文件</div><div class="line">           NSArray *subs = [fileManager contentsOfDirectoryAtPath:filePath error:nil];</div><div class="line">           if (subs.count &gt; 0) &#123;</div><div class="line">               for (int i=0; i&lt;subs.count; i++) &#123;</div><div class="line">                   NSString *fullFileStr = [NSString stringWithFormat:@&quot;%@%@&quot;,filePath,subs[i]];</div><div class="line">                   //判断文件是否可删除</div><div class="line">                   BOOL canDelete = [fileManager isDeletableFileAtPath:fullFileStr];</div><div class="line">                   if (canDelete) &#123;</div><div class="line">                       [fileManager removeItemAtPath:fullFileStr error:nil];</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       //5秒钟为周期，开始不断扫描文件并删除</div><div class="line">       [NSThread sleepForTimeInterval:5];</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NSFileManager&quot;&gt;&lt;a href=&quot;#NSFileManager&quot; class=&quot;headerlink&quot; title=&quot;NSFileManager&quot;&gt;&lt;/a&gt;NSFileManager&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想操作文件，该去了解下NS
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅地调试手机网页？</title>
    <link href="http://yoursite.com/2017/10/10/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E8%B0%83%E8%AF%95%E6%89%8B%E6%9C%BA%E7%BD%91%E9%A1%B5%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/10/10/如何优雅地调试手机网页？/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:49:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在web开发的过程中，抓包、调试页面样式、查看请求头是很常用的技巧。其实在iOS开发中，这些技巧也能用（无论是模拟器还是真机），不过我们需要用到mac自带的浏览器Safari。所以，本文将讲解如何使用Safari对iOS程序中的webview进行调试。<br>1、打开真机（模拟器）的开发者模式<br>【设置】-&gt; 【Safari】 -&gt; 【高级】 -&gt; 【Web检查器】打开<br><img src="http://upload-images.jianshu.io/upload_images/2287777-e937adb9c77a3768.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>2、打开MBP上的Safari的开发者模式：<br>【Safari】-&gt;【偏好设置】-&gt;【高级】-&gt; 【在菜单栏中显示“开发”菜单】勾选。<br>3、调试你的WebView页面。<br>4、在MBP的Safari选项中的开发，看到手机，右击可以看到正在调试的WebView的url<br><img src="http://upload-images.jianshu.io/upload_images/2287777-c12eb2da00e79f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>5、在弹出的这个框里面可以查看网页源代码以及可以调试样样式、查看localStorage、sessionStorage、Cookie的值等等，给原生端调试带来很大方便，不过这样前端调试更加方便啊，谷歌的模拟器不能完全模真实环境下的iphone使用效果啊。<br><img src="http://upload-images.jianshu.io/upload_images/2287777-4d55fd205fa81cc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在web开发的过程中，抓包、调试页面样式、查看请求头是很常用的技巧。其实在iOS开发中，这些技巧也能用（无论是模拟器还是真机），不过我们需要用到mac自带的浏览器Safari。所以，本文将讲解如何使用Safari对iOS程序中的webview进行调
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>外卖App双列表联动</title>
    <link href="http://yoursite.com/2017/10/10/%E5%A4%96%E5%8D%96App%E5%8F%8C%E5%88%97%E8%A1%A8%E8%81%94%E5%8A%A8/"/>
    <id>http://yoursite.com/2017/10/10/外卖App双列表联动/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:50:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="双列表联动"><a href="#双列表联动" class="headerlink" title="双列表联动"></a>双列表联动</h3><blockquote><p>用过了那么多的外卖App，总结出一个规律，那就是“所有的外卖App都有双列表联动功能”。哈哈哈哈，这是一个玩笑。</p><p>这次我也需要开发具有联动效果的双列表。也是首次开发这种类型的UI，记录下步骤与心得</p></blockquote><h4 id="一、关键思路"><a href="#一、关键思路" class="headerlink" title="一、关键思路"></a>一、关键思路</h4><ul><li>懒加载左右2个UITableView</li><li>根据需要自定义Cell</li><li>2个UITableView加载到界面上的时候注意下部剧就好</li><li>因为需要联动效果，所有左侧的UITableView一般是大的分类，右边的UITableView一般是大分类小的小分类，所以有了这样的特点<ul><li>左边的UITableView是只有1个section和n个row</li><li>右边的UITableView具有n个section（这里的section 个数恰好是左边UITableView的row数量），且每个section下的row由对应的数据源控制</li></ul></li></ul><h4 id="二、第一版代码"><a href="#二、第一版代码" class="headerlink" title="二、第一版代码"></a>二、第一版代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">#pragma mark -- UITableViewDelegate</div><div class="line">-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123;</div><div class="line">    if (tableView == self.leftTablview) &#123;</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line">    return self.datas.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</div><div class="line">    if (tableView == self.leftTablview) &#123;</div><div class="line">        return self.datas.count;</div><div class="line">    &#125;</div><div class="line">    QuestionCollectionModel *model = self.datas[section];</div><div class="line">    NSArray *questions =model.questions;</div><div class="line">    return questions.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    if (tableView == self.leftTablview) &#123;</div><div class="line">        return LeftCellHeight;</div><div class="line">    &#125;</div><div class="line">    return RightCellHeight;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    if (tableView == self.leftTablview) &#123;</div><div class="line">        PregnancyPeriodCell *cell = [tableView dequeueReusableCellWithIdentifier:PregnancyPeriodCellID forIndexPath:indexPath];</div><div class="line">        if (self.collectionType == CollectionType_Wrong || self.collectionType == CollectionType_Miss) &#123;</div><div class="line">            QuestionCollectionModel *model = self.datas[indexPath.row];</div><div class="line">            cell.week = model.tag;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return cell;</div><div class="line">    &#125;</div><div class="line">    QuestionCell *cell = [tableView dequeueReusableCellWithIdentifier:QuestionCellID forIndexPath:indexPath];</div><div class="line">    QuestionCollectionModel *model = self.datas[indexPath.section];</div><div class="line">    NSArray *questions =model.questions;</div><div class="line">    QuestionModel *questionModel = questions[indexPath.row];</div><div class="line">    cell.model = questionModel;</div><div class="line">    return cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    if (tableView == self.leftTablview) &#123;</div><div class="line">        NSIndexPath *indexpath = [NSIndexPath indexPathForRow:0 inSection:indexPath.row];</div><div class="line">        [self.rightTableview scrollToRowAtIndexPath:indexpath atScrollPosition:UITableViewScrollPositionTop animated:YES];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</div><div class="line">    if (scrollView == self.rightTableview) &#123;</div><div class="line">        NSIndexPath *indexpath = [self.rightTableview indexPathsForVisibleRows].firstObject;</div><div class="line">        NSIndexPath *leftScrollIndexpath = [NSIndexPath indexPathForRow:indexpath.section inSection:0];</div><div class="line">        [self.leftTablview selectRowAtIndexPath:leftScrollIndexpath animated:YES scrollPosition:UITableViewScrollPositionMiddle];</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>缺陷：虽然实现了效果，但是有缺陷。点击左侧的UITableView，右侧的UITableViewe滚动到相应的位置，这是没问题的，但是滚动</p><p>右边，需要根据右边indexPath.section将选中左侧相应的indexPath。这样左侧选中的时候，又会触发右边滚动的事件，整体看上去不是很流畅。</p><h4 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h4><p>观察了下，发现右侧滚动的时候左侧会上下选中，所以也就是只要让右侧滚动的时候，左侧的UITableView单方向选中，不要滚动就好，所以由于UITableView也是UIScrollview，所以在scrollViewDidScroll方法中判断右侧的UITableView是向上还是向下滚动，以此作为判断条件来让左侧的UITableView选中相应的行。</p><p>且之前是在scrollview代理方法中让左侧的tableview选中，这样子又会触发左侧tableview的选中事件，从而导致右侧的tablview滚动，造成不严谨的联动逻辑</p><p>改进后的方法：</p><ol><li><p>点击左侧的UITableView，在代理方法didSelectRowAtIndexPath中拿到相应的indexPath.row，计算出右侧UITableView需要滚动的indexPath的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[self.rightTableview scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:indexPath.row] atScrollPosition:UITableViewScrollPositionTop animated:YES];</div></pre></td></tr></table></figure></li><li><p>在willDisplayCell和didEndDisplayingCell代理方法中选中左侧UITableView相应的行。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">-(void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line"></div><div class="line">    if (tableView == self.rightTableview  &amp;&amp; !self.isScrollDown &amp;&amp; self.rightTableview.isDragging ) &#123;</div><div class="line">        [self.leftTablview selectRowAtIndexPath:[NSIndexPath indexPathForRow:indexPath.section inSection:0] animated:YES scrollPosition:UITableViewScrollPositionTop];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">-(void)tableView:(UITableView *)tableView didEndDisplayingCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    if (tableView == self.rightTableview &amp;&amp; self.isScrollDown &amp;&amp; self.rightTableview.isDragging) &#123;</div><div class="line">        [self.leftTablview selectRowAtIndexPath:[NSIndexPath indexPathForRow:indexPath.section+1 inSection:0] animated:YES scrollPosition:UITableViewScrollPositionTop];</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(nonnull NSIndexPath *)indexPath</div><div class="line">&#123;</div><div class="line">    if (self.leftTablview == tableView)</div><div class="line">    &#123;</div><div class="line">        [self.rightTableview scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:indexPath.row] atScrollPosition:UITableViewScrollPositionTop animated:YES];</div><div class="line">    &#125;else&#123;</div><div class="line">        NSLog(@&quot;嗡嗡嗡&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">#pragma mark - UIScrollViewDelegate</div><div class="line"></div><div class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</div><div class="line"></div><div class="line">    static CGFloat lastOffsetY = 0;</div><div class="line"></div><div class="line">    UITableView *tableView = (UITableView *)scrollView;</div><div class="line">    if (self.rightTableview == tableView)&#123;</div><div class="line">        self.isScrollDown = (lastOffsetY &lt; scrollView.contentOffset.y);</div><div class="line">        lastOffsetY = scrollView.contentOffset.y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h5><p> <img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/2017-09-24%2015_35_52.gif" alt="效果图" title="效果图"></p><p>附上Demo：<a href="https://github.com/FantasticLBP/BlogDemos" target="_blank" rel="external">Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;双列表联动&quot;&gt;&lt;a href=&quot;#双列表联动&quot; class=&quot;headerlink&quot; title=&quot;双列表联动&quot;&gt;&lt;/a&gt;双列表联动&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;用过了那么多的外卖App，总结出一个规律，那就是“所有的外卖App都有双列表联动功能”。哈
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>工程大小优化之图片资源</title>
    <link href="http://yoursite.com/2017/10/10/%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96%E4%B9%8B%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90/"/>
    <id>http://yoursite.com/2017/10/10/工程大小优化之图片资源/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工程大小优化之图片资源"><a href="#工程大小优化之图片资源" class="headerlink" title="工程大小优化之图片资源"></a>工程大小优化之图片资源</h3><blockquote><p><em>摘要：</em>点点iOS项目本身功能较多，导致应用体积也比较大。一个Xcode工程下图片资源占用了很大的空间，且如果有些App需要一键换肤功能，呵呵，不知道得做多少图片。每套图片还需要设置1x@,2x@,3x@等</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>IconFont技术起源于Web领域的Web Font技术。随着时间的推移，网页设计越来越漂亮。但是电脑预装的字体远远无法满足设计者的要求，于是Web Font技术诞生了。一个英文字库并不大，通过网络下载字体，完成网页的显示。有了Web Font技术，大大提升了设计师的发挥空间。</p><p>网页设计中图标需要适配多个分辨率，每个图标需要占用一次网络请求。于是有人想到了用Web Font的方法来解决这两个问题，就是IconFont技术。将矢量的图标做成字体，一次网络请求就够了，可以保真缩放。解决这个问题的另一个方式是图片拼合的Sprite图。</p><p>Web领域使用IconFont类似的技术已经多年，当我在15年接触BootStrap的时候Font Awesome技术大行其道。最近IconFont技术在iOS图片资源方面得以应用，最近有点时间自己研究整理了一番，在此记录学习点滴。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>减小体积，字体文件比图片要小</li><li>图标保真缩放，解决2x/3x乃至将来的nx图问题</li><li>方便更改颜色大小，图片复用</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>只适用于<br><code>纯色icon</code></li><li>使用unicode字符难以理解</li><li>需要维护字体库</li></ul><p>网上说了一大堆如何制作IconFont的方法，在此不做讨论。</p><h2 id="我们说说怎么用"><a href="#我们说说怎么用" class="headerlink" title="我们说说怎么用"></a>我们说说怎么用</h2><ol><li>首先选取一些有丰富资源的网站，我使用阿里的IconFont多年，其他的没去研究，所以此处直接使用阿里的产品。地址：<a href="http://www.iconfont.cn/plus" target="_blank" rel="external">http://www.iconfont.cn/plus</a></li><li>打开网站在线挑选好合适的图标加入购物车，如图<img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-05-28%20下午2.43.33.png" alt="阿里IconFont" title="阿里IconFont"></li><li>选择好之后在购物车查看，然后点击下载代码<img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-05-28%20下午2.43.48.png" alt="下载IconFont" title="下载IconFont"></li><li>打开下载好的文件，其机构如下，我们在iOS项目开发过程中使用unicode的形式使用IconFont,所以打开demo_unicode.html<br><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-05-28%20下午2.44.09.png" alt="下载文件目录结构" title="下载文件目录结构"><br><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-05-28%20下午2.44.22.png" alt="unicode形式使用IconFont" title="unicode形式使用IconFont"></li><li>注意：创建 UIFont 使用的是字体名，而不是文件名；文本值为 8 位的 Unicode 字符，我们可以打开 demo.html 查找每个图标所对应的 HTML 实体 Unicode 码，比如： “店” 对应的 HTML 实体 Unicode 码为：0x3439 转换后为：\U00003439 就是将 0x 替换为 \U 中间用 0 填补满长度为 8 个字符</li></ol><h1 id="Xcode中使用IconFont"><a href="#Xcode中使用IconFont" class="headerlink" title="Xcode中使用IconFont"></a>Xcode中使用IconFont</h1><p>初步尝试使用</p><ol><li>首先看看如何简单实用IconFont</li><li>首先将下载好的文件夹中的<strong>iconfont.ttf</strong>加入到Xcode工程中，确保加入成功在Build检查<img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-05-28%20下午2.51.36.png" alt="Xcode检查引入结果" title="Xcode检查引入结果"></li><li>怎么用？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">NSMutableAttributedString *attributedStr = [[NSMutableAttributedString alloc] initWithString:@&quot;\U0000e696  \U0000e6ab  \U0000e6ac  \U0000e6ae&quot;];</div><div class="line">    [attributedStr addAttribute:NSForegroundColorAttributeName value:[UIColor redColor] range:NSMakeRange(0, 1)];</div><div class="line">    [attributedStr addAttribute:NSForegroundColorAttributeName value:[UIColor orangeColor] range:NSMakeRange(3, 1)];</div><div class="line">    [attributedStr addAttribute:NSForegroundColorAttributeName value:[UIColor blackColor] range:NSMakeRange(9, 1)];</div><div class="line">    self.label.attributedText = attributedStr;</div><div class="line"></div><div class="line">[self.view addSubview:self.label];</div><div class="line"></div><div class="line">pragma mark - getter and setter</div><div class="line">-(UILabel *)label&#123;</div><div class="line">       if (!_label) &#123;</div><div class="line">           _label = [[UILabel alloc] initWithFrame:CGRectMake(100, 100, BoundWidth-200, 40)];</div><div class="line">           _label.font = [UIFont fontWithName:@&quot;iconfont&quot; size:24];</div><div class="line">           _label.textColor = [UIColor purpleColor];</div><div class="line">       &#125;</div><div class="line">       return _label;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h4 id="做进一步封装，实用更加方便"><a href="#做进一步封装，实用更加方便" class="headerlink" title="做进一步封装，实用更加方便"></a>做进一步封装，实用更加方便</h4><p>利用IconFont生成1个UIImage只需要<strong>LBPIconFontmake(par1, par2, par3)</strong>，par1:iconfont的unicode值；par2:图片大小；par3:图片的颜色值。</p><p>其中，LBPIconFontmake是一个宏，#define LBPIconFontmake(text,size,color) [[LBPFontInfo alloc] initWithText:text withSize:size andColor:color]。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.latestImageView.image = [UIImage iconWithInfo:LBPIconFontmake(@&quot;\U0000e6ac&quot;, 60, @&quot;000066&quot;) ];</div></pre></td></tr></table></figure><p><img src="https://github.com/FantasticLBP/iOSKonwledge-Kit/raw/master/assets/屏幕快照%202017-05-28%20下午2.56.00.png" alt="封装后的工程目录结构" title="封装后的工程目录结构"></p><ol><li>LBPFontInfo来封装字体信息</li><li>UIColor+picker根据十六进制字符串来设置颜色</li><li>LBPIconFont向系统中注册IconFont字体库，并使用</li><li>UIImage+LBPIconFont封装一个使用IconFont的Image分类</li></ol><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/Simulator%20Screen%20Shot%202017年5月28日%20下午3.19.44.png" alt="效果图" title="效果图"></p><h1 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h1><p><a href="https://github.com/FantasticLBP/IconFont_Demo" target="_blank" rel="external">https://github.com/FantasticLBP/IconFont_Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;工程大小优化之图片资源&quot;&gt;&lt;a href=&quot;#工程大小优化之图片资源&quot; class=&quot;headerlink&quot; title=&quot;工程大小优化之图片资源&quot;&gt;&lt;/a&gt;工程大小优化之图片资源&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;摘要：&lt;/em&gt;点点iOS项目本身
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>H5性能优化方面的探索</title>
    <link href="http://yoursite.com/2017/10/10/H5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E9%9D%A2%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
    <id>http://yoursite.com/2017/10/10/H5性能优化方面的探索/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="H5性能优化方面的探索"><a href="#H5性能优化方面的探索" class="headerlink" title="H5性能优化方面的探索"></a>H5性能优化方面的探索</h1><blockquote><p>H5很重要，很重要，很重要，重要的事情必须重复多遍，H5的优点：跨平台、迭代快、开发体验好。缺点：加载慢，用户体验差。所以在接下来很长一段时间内我将会从H5的几个缺点发面去研究如何优化。</p></blockquote><p>## </p><h2 id="一、缓存问题及其解决办法"><a href="#一、缓存问题及其解决办法" class="headerlink" title="一、缓存问题及其解决办法"></a>一、缓存问题及其解决办法</h2><p>经常遇到一个问题，H5页面由于缓存问题经常在H5发布新版本之后客户端App看不到最新的效果，之前由于杂七杂八的问题项目工期紧没好好研究，最近抽空研究了下缓存问题。</p><p>缓存问题具体表现为：UIWebview首次打开加载慢；第二次加载速度明显快；H5资源更新过后在App上看不到更改的效果</p><p>为此我认为是缓存造成的问题，我进入App目录下，看到Library下的Caches下面有很多文件名称很长的文件，点击预览可以看到是图片、css等，本来我想着找出H5资源缓存到App中的特点，然后用NSFileManager删除掉缓存文件，发现此路不通。</p><h4 id="我想通过控制变量法研究缓存是否存在。"><a href="#我想通过控制变量法研究缓存是否存在。" class="headerlink" title="我想通过控制变量法研究缓存是否存在。"></a>我想通过控制变量法研究缓存是否存在。</h4><h4 id="做了一个实验。步骤如下："><a href="#做了一个实验。步骤如下：" class="headerlink" title="做了一个实验。步骤如下："></a>做了一个实验。步骤如下：</h4><ul><li>用HBuilder（一个编辑器，开启后本机端口8020就可以访问网页）打开H5工程</li><li>在App的一个UIWebview页面上通过和电脑在同一个局域网的方式加载网页</li><li>在App上查看效果，观察某个元素的样式</li><li>在HBuilder编辑器中修改元素样式</li><li>在App上将UIWebView返回上一界面，再次进入查看该元素的样式</li><li>确定有没有变化，来确定有没有缓存</li></ul><p>结论：页面实时效果变化的，没有缓存</p><p>对比实验：</p><ul><li>用HBuilder（一个编辑器，开启后本机端口8020就可以访问网页）打开H5工程</li><li>git提交到服务端</li><li>在App的一个UIWebview页面上通过公网IP的方式加载网页</li><li>在App上查看效果，观察某个元素的样式</li><li>在HBuilder编辑器中修改元素样式</li><li>git提交后发布到服务器上</li><li>在App上将UIWebView返回上一界面，再次进入查看该元素的样式</li><li>确定有没有变化，来确定有没有缓存</li></ul><p>结论：页面没有看到最新的效果，明显缓存了。但是我很想知道为什么本地局域网的方式请求网页不会缓存，而通过公网IP的方式会缓存。</p><p>为此，我做了进一步的实验，用谷歌浏览器分别请求本地局域网和公网ip查看资源加载的情况。</p><p>1、公网IP<br><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-09-15%20下午5.56.28.png" alt=""></p><p>2、本地局域网</p><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-09-15%20下午6.27.16.png" alt=""></p><p>关键词Status Code</p><p>结论：从图上可以看出本地局域网不管首次加载还是刷新都是直接请求；而通过局域网的方式请求：首次请求是从服务器上获取，在此刷新的时候是从（from memory cache）中获取的。</p><h4 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h4><p>局域网 的方式网速都比较快所以不会缓存；</p><p>公网IP的方式可能由于网速问题会将首次请求到的资源缓存下来。</p><p>所以确定缓存存在了，那么如何避免缓存？</p><ul><li>App在启动后请求一个接口，这个接口的目的是获取当前H5资源的版本号</li><li>将获得的版本号保存下来（App本地保存）</li><li>由于UIWebView上加载网页，发起网络请求都可以通过一个代理方法所拦截，所以我们可以在这个代理方法中判断url的参数，可能是<a href="http://www.a.com/login、http://www.a.com/login.html、http://www.a.com/login.html?name=geek、http://www.a.com/login#readme等等，所以我们判断过url后考虑如何将版本号加到url里面" target="_blank" rel="external">http://www.a.com/login、http://www.a.com/login.html、http://www.a.com/login.html?name=geek、http://www.a.com/login#readme等等，所以我们判断过url后考虑如何将版本号加到url里面</a></li><li>由于我们的App使用了不同模块的UIWebView，但是都是在UIWebView上需要大量的JS交互，所以使用了WebViewJavascriptBridge这个库。UIWebView本身的代理方法不会执行，所以修改这个库里面的WebViewJavascriptBridge.m文件的代码，差不多是下面的方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType &#123;</div><div class="line">    if (webView != _webView) &#123; return YES; &#125;</div><div class="line">    NSURL *url = [rntity Tag 的资源直接访问equest URL];</div><div class="line">    if ([request.URL.absoluteString containsString:@&quot;http&quot;] || [request.URL.absoluteString containsString:@&quot;https&quot;]) &#123;</div><div class="line">        if ([request.URL.absoluteString containsString:@&quot;?&quot;]) &#123;</div><div class="line">            url = [NSURL URLWithString:[NSString stringWithFormat:@&quot;%@&amp;h5V=%@&quot;,request.URL.absoluteString,[ProjectUtil getH5VersionString]]];</div><div class="line">        &#125;else&#123;</div><div class="line">            url = [NSURL URLWithString:[NSString stringWithFormat:@&quot;%@?h5V=%@&quot;,request.URL.absoluteString,[ProjectUtil getH5VersionString]]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    LBPLOG(@&quot;url-&gt;%@&quot;,[url absoluteString]);</div><div class="line">    __strong WVJB_WEBVIEW_DELEGATE_TYPE* strongDelegate = _webViewDelegate;</div><div class="line">    if ([_base isCorrectProcotocolScheme:url]) &#123;</div><div class="line">        if ([_base isBridgeLoadedURL:url]) &#123;</div><div class="line">            [_base injectJavascriptFile];</div><div class="line">        &#125; else if ([_base isQueueMessageURL:url]) &#123;</div><div class="line">            NSString *messageQueueString = [self _evaluateJavascript:[_base webViewJavascriptFetchQueyCommand]];</div><div class="line">            [_base flushMessageQueue:messageQueueString];</div><div class="line">        &#125; else &#123;</div><div class="line">            [_base logUnkownMessage:url];</div><div class="line">        &#125;</div><div class="line">        return NO;</div><div class="line">    &#125; else if (strongDelegate &amp;&amp; [strongDelegate respondsToSelector:@selector(webView:shouldStartLoadWithRequest:navigationType:)]) &#123;</div><div class="line">        return [strongDelegate webView:webView shouldStartLoadWithRequest:request navigationType:navigationType];</div><div class="line">    &#125; else &#123;</div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>总结：</p><p>App的缓存问题暂时研究到这里，后期会继续研究其他方面的问题</p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p>通过浏览器我们知道有的缓存是200 OK（from cache ），有的缓存是304 Not modified。如果运维移除了Entity Tag就一直是200（from cache）。如果没有移除的话2者是交替出现的。</p><p>为什么2者会有区别？</p><ul><li>200 OK（from cache）是直接点击链接或者在浏览器地址栏中输入网址敲回车键的结果</li><li>而304 modified是我们刷新了浏览器页面时触发或者设置了长缓存、但Entity Tags没有移除时触发</li></ul><p>做了 实验得出结论：</p><ul><li><p>直接访问有缓存的网站都触发 200 OK (from cache)</p></li><li><p>刷新浏览器则会触发304</p></li><li><p>同一域名下，没有 Entity Tag 的资源直接访问，是 200 OK (from cache) 的结果</p></li><li><p>同一域名下，有Entity Tag 的资源直接访问，是出现304 Not Modified</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;H5性能优化方面的探索&quot;&gt;&lt;a href=&quot;#H5性能优化方面的探索&quot; class=&quot;headerlink&quot; title=&quot;H5性能优化方面的探索&quot;&gt;&lt;/a&gt;H5性能优化方面的探索&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;H5很重要，很重要，很重要，重要的事情必须
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>接口要怎么对？你知道正确的姿势吗</title>
    <link href="http://yoursite.com/2017/10/10/%E6%8E%A5%E5%8F%A3%E8%A6%81%E6%80%8E%E4%B9%88%E5%AF%B9%EF%BC%9F%E4%BD%A0%E7%9F%A5%E9%81%93%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%90%97/"/>
    <id>http://yoursite.com/2017/10/10/接口要怎么对？你知道正确的姿势吗/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:49:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天后台同事去温州出差，自己又多了一次远程协作办公的经历-对接口</p></blockquote><h1 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h1><p>我在公司主要做iOS和h5开发，懂点php开发（独立开发过一个完整的项目，写的了SQL、写的了接口、写的了后台）。</p><p>对接口的时候前端h5页面已经完成，开始了接口对接工作，但是接口对接并不是那么顺利，负责接口的人是一位“颇有”经验老司机，他看上去28左右的样子（小子我22）</p><h1 id="2、事情经过"><a href="#2、事情经过" class="headerlink" title="2、事情经过"></a>2、事情经过</h1><p>我写好ajax去请求数据发现这次对接并不是很友善。</p><ul><li>起初显示跨域访问，为了方便我让他后端设置运行跨域访问，因为没必要限制访问（加了Access-Control-Allow-Origin:*)</li><li>后来发现返回的数据并不和善，里面携带了大量的html标签，设置了“dataType:json”页面回调走入error里面</li><li>跟他叙述了事情经过居然说他用浏览器测试发现在页面上显示的数据是正常的，肯定是我接收数据解析出错</li><li>在下不服，我要跟你撕逼（讲道理）</li><li>这是我的观点“接口写好<strong>看的不是浏览器上的结果</strong>，要看<strong>response</strong>，你写的接口是要返回给c端或者b端的人去解析，再去展示，不是直接解析到浏览器上的“</li><li>再抛出一个我自己写的接口给他举例子</li></ul><h1 id="3、附图"><a href="#3、附图" class="headerlink" title="3、附图"></a>3、附图</h1><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-06-07%20下午3.21.18.png" alt="接口1" title="接口1"></p><p><img src="https://github.com/FantasticLBP/iOSKonwledge-Kit/blob/master/assets/屏幕快照%202017-06-07%20下午3.21.182.png?raw=true" alt="接口2" title="接口2"><br><img src="https://github.com/FantasticLBP/iOSKonwledge-Kit/blob/master/assets/屏幕快照%202017-06-07%20下午3.21.183.png?raw=true" alt="接口3" title="接口3"></p><h1 id="4、启发"><a href="#4、启发" class="headerlink" title="4、启发"></a>4、启发</h1><p>广大开发者朋友们，做开发不管是web还是客户端开发网络知识以及基本的调试知识一定要有，遇到问题一层层排除定位再去解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天后台同事去温州出差，自己又多了一次远程协作办公的经历-对接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1、背景&quot;&gt;&lt;a href=&quot;#1、背景&quot; class=&quot;headerlink&quot; title=&quot;1、背景&quot;&gt;&lt;/a&gt;1、背景&lt;/h
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
</feed>
