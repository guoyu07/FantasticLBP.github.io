<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杭城小刘</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-18T02:10:47.021Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杭城小刘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS 埋点统计</title>
    <link href="http://yoursite.com/2018/01/18/CSS-%E5%9F%8B%E7%82%B9%E7%BB%9F%E8%AE%A1/"/>
    <id>http://yoursite.com/2018/01/18/CSS-埋点统计/</id>
    <published>2018-01-18T01:49:00.000Z</published>
    <updated>2018-01-18T02:10:47.021Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当一个网站或者 App 的规模达到一定程度，需要分析用户在 App 或者网站的相应操作，则需要埋点统计用户行为，这个不用多说，具体实现有 JS 脚本写好埋点事件并调接口，今天 get 到一种新的埋点统计方式保证耳目一新。下面代码简单示范一下。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">//index.html</div><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot; /&gt;</div><div class="line">&lt;title&gt;CSS埋点&lt;/title&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.background &#123;</div><div class="line">background-size: 100% 100%;</div><div class="line">width: 100%;</div><div class="line">height: 100%;</div><div class="line">position: fixed;</div><div class="line">z-index: -100;</div><div class="line">&#125;</div><div class="line"></div><div class="line">html &#123;</div><div class="line">background-color: #fff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.notice-content &#123;</div><div class="line">border: 1px #ccc solid;</div><div class="line">padding: 19px;</div><div class="line">border-radius: 10px;</div><div class="line">width: 80%;</div><div class="line">margin-left: 10%;</div><div class="line">margin-top: 10%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.check-content &#123;</div><div class="line">padding: 0!important;</div><div class="line">width: 80%!important;</div><div class="line">margin-left: 25px;</div><div class="line">margin-top: 10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.confirm &#123;</div><div class="line">float: left;</div><div class="line">position: relative!important;</div><div class="line">left: 6%;</div><div class="line">height: 32px!important;</div><div class="line">line-height: 32px!important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.btn &#123;</div><div class="line">border: 1px solid #ff6689;</div><div class="line">background-color: #ff6689;</div><div class="line">width: 60%;</div><div class="line">margin-left: 20%;</div><div class="line">margin-top: 36px;</div><div class="line">font-size: 16px;</div><div class="line">font-weight: bold;</div><div class="line">color: #FFFFFF;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.title &#123;</div><div class="line">display: block;</div><div class="line">text-align: center;</div><div class="line">font-size: 20px;</div><div class="line">margin-bottom: 19px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">span &#123;</div><div class="line">display: block;</div><div class="line">margin-bottom: 7px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.mui-checkbox input[type=checkbox]:checked:before,</div><div class="line">.mui-radio input[type=radio]:checked:before &#123;</div><div class="line">color: #ff6689;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.body-content &#123;</div><div class="line">width: 100%;</div><div class="line">height: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">body &#123;</div><div class="line">background-color: rgba(239, 239, 244, 0)!important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.link:active::after&#123;</div><div class="line">margin: 100px 100px;</div><div class="line">color: red;</div><div class="line">content: url(&quot;http://192.168.1.100:8888/Hotels_Server/view/count.php?action=visit&quot;);</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class=&quot;loading&quot;&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div style=&quot;&quot; class=&quot;body-content&quot;&gt;</div><div class="line">&lt;div class=&quot;background&quot;&gt;</div><div class="line">&lt;!-- &lt;img id=&quot;background&quot; src=&quot;img/background.png&quot;&gt; --&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div class=&quot;notice-content&quot;&gt;</div><div class="line">&lt;label class=&quot;title&quot;&gt;登记须知&lt;/label&gt;</div><div class="line">&lt;span&gt;1.本次登记仅限于中国地区。&lt;/span&gt;</div><div class="line">&lt;span&gt;2.完成登记审核通过后，生育登记服务卡可到乡（镇、街道）直接领取，也可选择邮寄到付快递给申请人。&lt;/span&gt;</div><div class="line">&lt;span&gt;3.申请登记信息需真实完整，如有虚假，申请人将承担相应的法律责任。&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;a class=&quot;link title&quot;&gt;访问&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//count.php</div><div class="line">&lt;?php</div><div class="line">/**</div><div class="line">* Created by PhpStorm.</div><div class="line">* User: geek</div><div class="line">* Date: 2018/1/18</div><div class="line">* Time: 上午9:56</div><div class="line">*/</div><div class="line"></div><div class="line">$actionName =  $_REQUEST[&quot;action&quot;];</div><div class="line"></div><div class="line">//时间格式化</div><div class="line">$time = time();</div><div class="line">$time = Date(&quot;Y-m-d&quot;,$time);</div><div class="line"></div><div class="line">echo &quot;访问动作-&gt;&quot; .$actionName. &quot; 访问时间-&gt;&quot; . $time;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/2287777-c1d479c5171de2d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="css点击统计"></p><p><img src="http://upload-images.jianshu.io/upload_images/2287777-a50bd17a33290204.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="php代码统计"></p><p><strong>说明</strong></p><ul><li>当然这种方式使用比较简单的事件埋点。复杂的话还是需要 JS 操作。</li><li>JS 埋点统计用户可以通过浏览器禁用，CSS的话没办法禁用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;当一个网站或者 App 的规模达到一定程度，需要分析用户在 App 或者网站的相应操作，则需要埋点统计用户行为，这个不用多说，具体实现有 JS 脚本写好埋点事件并调接口，今天 get 到一种新的埋点统计方式保证耳目一新。下面代码简单示范一下。&lt;/p
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>较好的用户体验获取 App 使用权限的方式</title>
    <link href="http://yoursite.com/2018/01/18/%E8%BE%83%E5%A5%BD%E7%9A%84%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E8%8E%B7%E5%8F%96-App-%E4%BD%BF%E7%94%A8%E6%9D%83%E9%99%90%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/01/18/较好的用户体验获取-App-使用权限的方式/</id>
    <published>2018-01-18T01:40:09.000Z</published>
    <updated>2018-01-18T01:47:59.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前市面上大多数的 App 获取权限都是在用户在使用该功能的时候弹出获取权限的请求，这样子用户在用的时候弹出来要么给予权限，要么关闭权限这种方式显得用户很被动。最近看到 instagram 的获取用户权限的方式比较好。记录下来以后用得着</p></blockquote><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/6707f65fgy1fnim1n0a4mj20qo1lrtat.jpg" alt="instagram获取App权限"></p><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/6707f65fgy1fnim1m4o7jj20qo1lrach.jpg" alt="微博获取App权限"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;目前市面上大多数的 App 获取权限都是在用户在使用该功能的时候弹出获取权限的请求，这样子用户在用的时候弹出来要么给予权限，要么关闭权限这种方式显得用户很被动。最近看到 instagram 的获取用户权限的方式比较好。记录下来以后用得着&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>命令行文件查找</title>
    <link href="http://yoursite.com/2017/12/26/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2017/12/26/命令行文件查找/</id>
    <published>2017-12-26T01:29:51.000Z</published>
    <updated>2017-12-26T01:30:38.165Z</updated>
    
    <content type="html"><![CDATA[<p>在日常中，find的使用频率很高，熟练掌握对提供工作效率很有帮助。</p><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find(选项)(参数)</div></pre></td></tr></table></figure><p>1、列出当前目录以及目录下的所有文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find .</div></pre></td></tr></table></figure><p>2、找到当前目录下名字为 11.png 的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name &quot;11.png&quot;</div></pre></td></tr></table></figure><p>3、找到当前目录下所有的  jpg 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name &quot;*.jpg&quot;</div></pre></td></tr></table></figure><p>4、找到当前目录下的  jpg 文件和 png 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name &quot;*.jpg&quot; -o -name &quot;*.png&quot;</div></pre></td></tr></table></figure><p>5、找到当前目录下不是以 png 结尾的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . ! -nam &quot;*.png&quot;</div></pre></td></tr></table></figure><p>6、根据正则表达式查找</p><p>比如：查找当前目录下，文件名都是数字的 png 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -regex &quot;\./*[0-9]+\.png&quot;</div></pre></td></tr></table></figure><p>7、根据路径查找</p><p>找到当前目录下路径中包含 swj 的文件/路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -path &quot;*swj*&quot;</div></pre></td></tr></table></figure><p>8、根据文件类型查找</p><p>查找当前目录下，路径包含 swj 的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -type f -path &quot;*swj*&quot;</div></pre></td></tr></table></figure><p>9、限制搜索深度</p><p>查找当前目录下所有的 png，不包括字目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -maxdepth 1 -name &quot;*.png&quot;</div></pre></td></tr></table></figure><p>相应的， mindepth 也是选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -mindepth 2 -name &quot;*.png&quot;</div></pre></td></tr></table></figure><p>10、根据文件大小</p><p>通过 -size 来过滤文件大小，支持的单位如下</p><ul><li>b - 块（512字节）</li><li>c - 字节</li><li>w - 字 （2字节）</li><li>k - 千字节</li><li>M - 兆字节</li><li>G - 吉字节</li></ul><p>找出当前目录下文件大小超过 100M 的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -type f -size +100M</div></pre></td></tr></table></figure><p>11、根据访问/修改/变化时间</p><ul><li>访问时间（-atime/天，-amin/分钟）：用户最近一次访问时间</li><li>修改时间 （-mtime/天， -mmin/分钟）： 文件最后一次修改时间</li><li>变化时间 （-ctime/天， -cmin/分钟）：文件数据元（例如权限的过）最后一次修改时间</li></ul><p>找出 1天内被修改过的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -type f -mtime -1</div></pre></td></tr></table></figure><p>找出最近1周内被访问过的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -type f -atime -7</div></pre></td></tr></table></figure><p>12、根据权限</p><p>通过 -perm 来实现</p><p>找出当前目录下权限为777的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -type f -perm 777</div></pre></td></tr></table></figure><p>找出当前目录下权限不是644的php文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -type f -name &quot;*.php&quot; ! -perm 644</div></pre></td></tr></table></figure><p>13、根据文件拥有者</p><p>找出文件拥有者为 root 的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -type f -user root</div></pre></td></tr></table></figure><p>找出文件所在群组为 root 的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -type f -group root</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在日常中，find的使用频率很高，熟练掌握对提供工作效率很有帮助。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/12/13/Javascript-prototype/"/>
    <id>http://yoursite.com/2017/12/13/Javascript-prototype/</id>
    <published>2017-12-13T09:23:12.742Z</published>
    <updated>2017-12-13T09:23:12.742Z</updated>
    
    <content type="html"><![CDATA[<p>原<br>型继承<br>JS中的继承跟其他面向对象语言的继承有点不太一样，要正确的了解JS中的继承还得了解JS的前世今生。<br>一、从JS的诞生之初说起<br>要理解Javascript的设计思想还得从它的诞生说起。</p><p>1994年网景公司（Netscape）发布了 Navigator 浏览器 0.9 版。这是历史上第一个比较成熟的网络浏览器，轰动一时，但是这个版本的浏览器只能用来浏览，不具备与访问者交互的能力。比如网页上有一个地方需要用户输入“用户名” ，当时浏览器无法判断访问者是否真的填写了，只有让服务器判断，如果没有填写，服务器就返回错误，这太浪费时间和服务器资源了。</p><p>因此，网景公司需要一种网页脚本语言，使得浏览器可以与网页互动，工程师 Brendan Eich 负责开发这种新语言。他觉得没有必要设计的很复杂，这种语言只要能够完成一些简单的操作就足够了，比如判断用户有没有填写表单。</p><p>1994年正是面向对象编程（OOP）最兴盛的时期，C++是当时最流行的语言，Java语言的1.0版即将在第二年推出，Sun 公司正在大肆造势。</p><p>Brendan Eich 无疑收到了影响，JS里面所有的数据类型都是对象，这一点与Java非常相似，但是他随即遇到一个问题，到底要不要设计继承机制？</p><p>二、Brendan Eich的选择<br>如果 真的是一种简易的脚本语言，其实不需要有“继承”机制，但是JS里面都是对象，必须有一种机制，将所有的对象都联系起来，所以他最后还是设计了“继承”。</p><p>但是他没有引入“类”的概念，因为一旦有了“类”，JS就是一门完全面向对象的语言了，增加了初学者的难度，他考虑到 C++ 和 Java 都使用 new 命令，生成实例。</p><p>C++ 写法</p><p>ClassName *object = new ClassName(param);<br>Java 写法</p><p>Foo foo = new Foo();<br>因此引入了 new 命令，用来从原型对象生成一个实例对象，但是JS没有“类”的概念，怎么表示原型对象？</p><p>这时他想到 C++ 和 Java 都是使用 new 命令，会调用类的构造函数（constructor）。他就设计了一个简化版，在 JS 语言中，new 命令后跟的不是类，而是构造函数。</p><p>举例来说，用狗的构造函数表示狗对象的原型。</p><p>function Dog(name){<br>    this.name = name;<br>}<br>对这个构造函数使用 new， 就会生成一个狗对象的实例。</p><p>var dog1 = new Dog(“阿拉斯加”);<br>console.log(dog1.name);    //阿拉斯加<br>注意：构造函数中的 this 关键字，指向了新构建的实例对象。</p><p>三、new 运算符的缺点<br>用构造函数生成的实例对象，有一个缺点就是无法共享属性和方法。</p><p>比如，在Dog对象的构造函数中，设置一个实例对象的共有属性category</p><p>function Dog(name){<br>         this.name = name;<br>     this.categey = “dog”;<br>}</p><p>var dog1 = new Dog(“阿拉斯加”);<br>var dog2 = new Dog(“萨摩”);</p><p>console.log(dog1.category);         //dog<br>console.log(dog2.category);         //dog</p><p>dog1.category = “阿拉斯加”;<br>console.log(dog1.category);         //阿拉斯加<br>console.log(dog2.category);         //dog<br>这时候2个对象的category属性是独立的，修改其中一个，不会影响另一个。</p><p>这样 的弊端就是每一个实例对象，都有自己的属性和方法的副本，无法做到数据的共享，对内存的极大浪费。</p><p>四、prototype 属性的引入<br>考虑到这一点，Brendan Eich 决定为构造函数设置一个 prototype 属性。</p><p>这个属性包含一个对象，所有的实例对象需要共享的属性和方法都保存在这个对象里面，那些不需要共享的属性和方法就放在构造函数里面。</p><p>实例对象一旦创建，将自动引用 prototype 对象的属性和方法， 也就是说实例对象的属性和方法，分成两种，一种是自己（子类）的属性和方法，另一种是引用的（父类）。</p><p>function Dog(name) {<br>    this.name = name;<br>}</p><p>Dog.prototype.category = “dog”;<br>var dog1 = new Dog(“阿拉斯加”);<br>var dog2 = new Dog(“萨摩”);<br>console.log(dog1.category); //dog<br>console.log(dog2.category); //dog<br>dog1.category = “啸天犬”;<br>console.log(dog1.category); //啸天犬<br>console.log(dog2.category); //dog<br>dog1.<strong>proto</strong>.category = “啸天犬”;<br>console.log(dog1.category); //啸天犬<br>console.log(dog2.category); //啸天犬<br>现在 category 属性存放在 prototype 对象里面，被子类共享，只要修改 prototype 对象里面的 category 值，子类都会被改变。</p><p>修改可以通过2种方法修改</p><p>1、dog1.<strong>proto</strong>.category = “啸天犬”;<br>2、Dog.prototype.category = “啸天犬”;<br>五、总结<br>由于所有的实例对象共享同一个 prototype 对象，那么外界看起来就是 prototype 对象就像是实例对象的原型， 而实例对象就好像继承了 prototype 对象一样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原&lt;br&gt;型继承&lt;br&gt;JS中的继承跟其他面向对象语言的继承有点不太一样，要正确的了解JS中的继承还得了解JS的前世今生。&lt;br&gt;一、从JS的诞生之初说起&lt;br&gt;要理解Javascript的设计思想还得从它的诞生说起。&lt;/p&gt;
&lt;p&gt;1994年网景公司（Netscape）发
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UINavigation的妙用</title>
    <link href="http://yoursite.com/2017/12/06/UINavigation%E7%9A%84%E4%B8%80%E7%82%B9%E7%94%A8%E9%80%94/"/>
    <id>http://yoursite.com/2017/12/06/UINavigation的一点用途/</id>
    <published>2017-12-06T09:52:34.000Z</published>
    <updated>2017-12-06T09:55:35.561Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UINavagationController重写push和pop方法"><a href="#UINavagationController重写push和pop方法" class="headerlink" title="UINavagationController重写push和pop方法"></a>UINavagationController重写push和pop方法</h3><blockquote><p>有个需求就是在App的Tab的首页需要显示浮动着的交互动画的机器人，该机器人具有机器学习的特点，因此可以不断的与用户交互，怎么样实现只浮动在App的5个tab首页，当点击跳转不是首页的时候不需要显示</p></blockquote><p>因为5个tab上是5个自定义的导航控制器，所以我们可以监听导航控制器的push和pop事件，并且在push和pop的事件中判断当前控制器的字控制器的数量来判断窗口上的机器人是否需要显示，其实这里要说的就是如何监听push和pop事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">*  重写这个方法的目的:为了拦截整个push过程,拿到所有push进来的子控制器</div><div class="line">*</div><div class="line">*  @param viewController 当前push进来的子控制器</div><div class="line">*/</div><div class="line">- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated</div><div class="line">&#123;</div><div class="line">//    if (viewController != 栈底控制器) &#123;</div><div class="line">if (self.viewControllers.count &gt; 0) &#123;</div><div class="line"></div><div class="line">for (UIView *view in [UIApplication sharedApplication].keyWindow.subviews) &#123;</div><div class="line">if ([view isKindOfClass:[XLRobotImageView class]]) &#123;</div><div class="line">if (self.viewControllers.count &gt; 0) &#123;</div><div class="line">self.robotView = (XLRobotImageView *)view;</div><div class="line">[view removeFromSuperview];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 当push这个子控制器时, 隐藏底部的工具条</div><div class="line">viewController.hidesBottomBarWhenPushed = YES;</div><div class="line"></div><div class="line">UIButton *backButton = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">backButton.frame = CGRectMake(0, 0, 44, 44);</div><div class="line">[backButton setImage:[UIImage imageNamed:@&quot;backArror&quot;] forState:UIControlStateNormal];</div><div class="line">[backButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];</div><div class="line"></div><div class="line">backButton.adjustsImageWhenHighlighted = NO;</div><div class="line">backButton.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;</div><div class="line"></div><div class="line">backButton.titleLabel.font = [UIFont systemFontOfSize:16];</div><div class="line"></div><div class="line">[backButton addTarget:self action:@selector(back) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">[backButton setImageEdgeInsets:UIEdgeInsetsMake(0, 5 * BoundWidth/375, 0, 0)];</div><div class="line">viewController.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:backButton];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 将viewController压入栈中</div><div class="line">[super pushViewController:viewController animated:animated];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">-(UIViewController *)popViewControllerAnimated:(BOOL)animated&#123;</div><div class="line">//在5个tab的首页需要显示</div><div class="line">NSArray *vcs = self.viewControllers;</div><div class="line">UIViewController *topVC = vcs[vcs.count - 2];</div><div class="line">if (self.viewControllers.count &gt;= 2) &#123;</div><div class="line">if ([topVC isKindOfClass:[MZPregnancyHomeController class]] ||</div><div class="line">[topVC isKindOfClass:[HLSettingViewController class]] ||</div><div class="line">[topVC isKindOfClass:[BBXEditViewController class]] ||</div><div class="line">[topVC isKindOfClass:[HLFriendTopicController class]] ||</div><div class="line">[topVC isKindOfClass:[MZBookViewController class]]</div><div class="line">) &#123;</div><div class="line">[[UIApplication sharedApplication].keyWindow addSubview:self.robotView];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return [super popViewControllerAnimated:animated];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>敲黑板，注意啦</strong></p><p>因为我做的一个全局的机器人只需要浮动在App的5个模块的首页，所以当页面进入第二层的时候就需要隐藏机器人，当App的顶层控制器是最外层的首页的时候再显示机器人，用导航控制器的push和pop监听就可以实现这个需求，但是遇到的一个问题就是当App从首页进入到第二层页面，用于手动右滑且滑到一半停止，这样子页面还是停留在第二层但是此时也会触发pop方法上面的代码就有点问题</p><p>因此想办法需要监听导航控制器里面每个控制器的出现事件，找到一个方法 <code>- (void)navigationController:(UINavigationController *)navigationController didShowViewController:(UIViewController *)viewController animated:(BOOL)animated;</code>恰好满足需求，以前没用过记录下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (void)navigationController:(UINavigationController *)navigationController didShowViewController:(UIViewController *)viewController animated:(BOOL)animated&#123;</div><div class="line">self.interactivePopGestureRecognizer.enabled = [self.viewControllers count] &gt; 1 ;</div><div class="line"></div><div class="line">if ([viewController isKindOfClass:[MZPregnancyHomeController class]] ||</div><div class="line">[viewController isKindOfClass:[HLSettingViewController class]] ||</div><div class="line">[viewController isKindOfClass:[BBXEditViewController class]] ||</div><div class="line">[viewController isKindOfClass:[HLFriendTopicController class]] ||</div><div class="line">[viewController isKindOfClass:[MZBookViewController class]]</div><div class="line">) &#123;</div><div class="line">[[UIApplication sharedApplication].keyWindow addSubview:self.robotView];</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  HLNavigationController.m</div><div class="line">//  heletalk-patient</div><div class="line">//</div><div class="line">//  Created by Damon on 15/12/18.</div><div class="line">//  Copyright © 2015年 heletech. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;HLNavigationController.h&quot;</div><div class="line">#import &quot;XLRobotImageView.h&quot;</div><div class="line"></div><div class="line">#import &quot;MZPregnancyHomeController.h&quot;</div><div class="line">#import &quot;HLSettingViewController.h&quot;</div><div class="line">#import &quot;BBXEditViewController.h&quot;</div><div class="line">#import &quot;HLFriendTopicController.h&quot;</div><div class="line">#import &quot;MZBookViewController.h&quot;</div><div class="line"></div><div class="line"></div><div class="line">@interface HLNavigationController ()&lt;UIGestureRecognizerDelegate&gt;</div><div class="line"></div><div class="line">@property (nonatomic, strong) XLRobotImageView *robotView;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation HLNavigationController</div><div class="line"></div><div class="line">+ (void)initialize</div><div class="line">&#123;</div><div class="line">[[UINavigationBar appearance] setTitleTextAttributes:</div><div class="line">[NSDictionary dictionaryWithObjectsAndKeys:[UIColor whiteColor], NSForegroundColorAttributeName, [UIFont fontWithName:@&quot;Lato-Regular&quot; size:18], NSFontAttributeName, nil]];</div><div class="line"></div><div class="line">[[UINavigationBar appearance] setTranslucent:NO];</div><div class="line"></div><div class="line">NSMutableDictionary *testAttr = [NSMutableDictionary dictionary];</div><div class="line">testAttr[NSForegroundColorAttributeName] = [UIColor whiteColor];</div><div class="line">testAttr[NSFontAttributeName] = [UIFont systemFontOfSize:18];</div><div class="line"></div><div class="line">[[UINavigationBar appearance] setTitleTextAttributes:testAttr];</div><div class="line"></div><div class="line">testAttr = [NSMutableDictionary dictionary];</div><div class="line">testAttr[NSForegroundColorAttributeName] = [UIColor whiteColor];</div><div class="line"></div><div class="line">[[UIBarButtonItem appearance] setTitleTextAttributes:testAttr forState:UIControlStateNormal];</div><div class="line"></div><div class="line"></div><div class="line">[[UINavigationBar appearance] setTintColor:[UIColor whiteColor]];</div><div class="line"></div><div class="line">[[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];</div><div class="line"></div><div class="line">[[UINavigationBar appearance] setBackgroundImage:[[UIImage alloc] init] forBarMetrics:UIBarMetricsDefault];</div><div class="line">[[UINavigationBar appearance] setShadowImage:[[UIImage alloc] init]];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">[super viewDidLoad];</div><div class="line">[[UINavigationBar appearance] setBarTintColor:GlobalMainColor];</div><div class="line"></div><div class="line">// 设置pop手势的代理</div><div class="line">self.interactivePopGestureRecognizer.delegate = self;</div><div class="line">self.delegate = self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line">*  重写这个方法的目的:为了拦截整个push过程,拿到所有push进来的子控制器</div><div class="line">*</div><div class="line">*  @param viewController 当前push进来的子控制器</div><div class="line">*/</div><div class="line">- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated</div><div class="line">&#123;</div><div class="line">//    if (viewController != 栈底控制器) &#123;</div><div class="line">if (self.viewControllers.count &gt; 0) &#123;</div><div class="line"></div><div class="line">for (UIView *view in [UIApplication sharedApplication].keyWindow.subviews) &#123;</div><div class="line">if ([view isKindOfClass:[XLRobotImageView class]]) &#123;</div><div class="line">if (self.viewControllers.count &gt; 0) &#123;</div><div class="line">self.robotView = (XLRobotImageView *)view;</div><div class="line">[view removeFromSuperview];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 当push这个子控制器时, 隐藏底部的工具条</div><div class="line">viewController.hidesBottomBarWhenPushed = YES;</div><div class="line"></div><div class="line">UIButton *backButton = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">backButton.frame = CGRectMake(0, 0, 44, 44);</div><div class="line">[backButton setImage:[UIImage imageNamed:@&quot;backArror&quot;] forState:UIControlStateNormal];</div><div class="line">[backButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];</div><div class="line"></div><div class="line">backButton.adjustsImageWhenHighlighted = NO;</div><div class="line">backButton.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;</div><div class="line"></div><div class="line">backButton.titleLabel.font = [UIFont systemFontOfSize:16];</div><div class="line"></div><div class="line">[backButton addTarget:self action:@selector(back) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">[backButton setImageEdgeInsets:UIEdgeInsetsMake(0, 5 * BoundWidth/375, 0, 0)];</div><div class="line">viewController.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:backButton];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 将viewController压入栈中</div><div class="line">[super pushViewController:viewController animated:animated];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (void)back&#123;</div><div class="line">[self popViewControllerAnimated:YES];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - &lt;UIGestureRecognizerDelegate&gt;</div><div class="line">/**</div><div class="line">*  这个代理方法的作用:决定pop手势是否有效</div><div class="line">*</div><div class="line">*  @return YES:手势有效, NO:手势无效</div><div class="line">*/</div><div class="line">- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer</div><div class="line">&#123;</div><div class="line">if (self.disableGesture) &#123;</div><div class="line">return NO;</div><div class="line">&#125;</div><div class="line">return self.viewControllers.count &gt; 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)navigationController:(UINavigationController *)navigationController didShowViewController:(UIViewController *)viewController animated:(BOOL)animated&#123;</div><div class="line">self.interactivePopGestureRecognizer.enabled = [self.viewControllers count] &gt; 1 ;</div><div class="line"></div><div class="line">if ([viewController isKindOfClass:[MZPregnancyHomeController class]] ||</div><div class="line">[viewController isKindOfClass:[HLSettingViewController class]] ||</div><div class="line">[viewController isKindOfClass:[BBXEditViewController class]] ||</div><div class="line">[viewController isKindOfClass:[HLFriendTopicController class]] ||</div><div class="line">[viewController isKindOfClass:[MZBookViewController class]]</div><div class="line">) &#123;</div><div class="line">[[UIApplication sharedApplication].keyWindow addSubview:self.robotView];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;UINavagationController重写push和pop方法&quot;&gt;&lt;a href=&quot;#UINavagationController重写push和pop方法&quot; class=&quot;headerlink&quot; title=&quot;UINavagationController重写
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>h5自定义对象</title>
    <link href="http://yoursite.com/2017/12/05/h5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/12/05/h5自定义对象/</id>
    <published>2017-12-05T14:27:38.000Z</published>
    <updated>2017-12-05T14:28:24.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、方式一"><a href="#一、方式一" class="headerlink" title="一、方式一"></a>一、方式一</h1><p>在很早以前我们自定义元素的属性要通过 <code>user-defined-attribute=&quot;value&quot;</code>的方式来设置自己需要的属性</p><p>设置自定义属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1 user-defined-attribute=&quot;share&quot;&gt;杭城小刘&lt;/h1&gt;</div></pre></td></tr></table></figure><p>获取自定义属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.getElementsByTagName(&quot;h1&quot;)[0].getAttribute(&quot;user-defined-attribute&quot;)</div></pre></td></tr></table></figure><h1 id="二、方式二"><a href="#二、方式二" class="headerlink" title="二、方式二"></a>二、方式二</h1><p>现在H5为我们提供了一个data属性  <strong>“data-“ </strong>作为前缀，可以让所有的HTML元素都支持自定义的属性，只要在标签里面以 <strong>“data-“</strong></p><p>为前缀定义需要的属性即可</p><p>设置自定义属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1 data-share=&quot;true&quot;&gt;杭城小刘&lt;/h1&gt;</div></pre></td></tr></table></figure><p>获取自定义属性（使用H5自定义属性对象Dataset来获取）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var myDiv = document.getElementsByTagName(&quot;h1&quot;)[0];</div><div class="line">var theValue = myDiv.dataset;    //DOMStringMap对象</div><div class="line"></div><div class="line">document.getElementsByTagName(&quot;h1&quot;)[0].dataset.share</div><div class="line">document.getElementsByTagName(&quot;h1&quot;)[0].dataset[&quot;share&quot;]</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.getElementsByTagName(&quot;h1&quot;)[0].getAttribute(&quot;data-share&quot;)</div></pre></td></tr></table></figure><p><code>DOMStringMap</code>是HTML5一种新的含有多个名-值对的交互变量</p><h1 id="三、H5-dataset的操作"><a href="#三、H5-dataset的操作" class="headerlink" title="三、H5 dataset的操作"></a>三、H5 dataset的操作</h1><p>删掉一个data属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete myDiv.dataset.share</div></pre></td></tr></table></figure><p>增加一个属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myDiv.dataset.happy=&quot;ok&quot;</div></pre></td></tr></table></figure><h1 id="四、dataset兼容性处理"><a href="#四、dataset兼容性处理" class="headerlink" title="四、dataset兼容性处理"></a>四、dataset兼容性处理</h1><p>如果不支持dataset，有必要做一下兼容性处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if(myDiv.dataset)&#123;</div><div class="line">myDiv.dataset.sad = &quot;false&quot;;</div><div class="line">var thevalue = myDiv.dataset.sad;</div><div class="line">&#125;else&#123;</div><div class="line">myDiv.setAttribute(&quot;data-attribute&quot;,&quot;sad&quot;);</div><div class="line">var theValue = myDiv.getAttribute(&quot;data-attribute&quot;); // 获取自定义属性</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>做一个实验：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;我的标题&lt;/title&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1 data-share=&quot;true&quot;&gt;杭城小刘&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">console.log(document.getElementsByTagName(&quot;h1&quot;)[0].getAttribute(&quot;user-defined-attribute&quot;));</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>然后利用chrome调试，在console命令行分别输入3条指令，结果如下图<br>png<br><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-12-05%20下午10.19.04.png" alt="实验结果">可以看出来，dataset后跟的属性是驼峰命名原则，如果多个单词第二个单词首字母需要大写，检查元素可以看到神奇的变化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、方式一&quot;&gt;&lt;a href=&quot;#一、方式一&quot; class=&quot;headerlink&quot; title=&quot;一、方式一&quot;&gt;&lt;/a&gt;一、方式一&lt;/h1&gt;&lt;p&gt;在很早以前我们自定义元素的属性要通过 &lt;code&gt;user-defined-attribute=&amp;quot;valu
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>控制器加载的玄机</title>
    <link href="http://yoursite.com/2017/11/15/%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%8E%84%E6%9C%BA/"/>
    <id>http://yoursite.com/2017/11/15/控制器加载的玄机/</id>
    <published>2017-11-15T01:03:07.000Z</published>
    <updated>2017-11-15T04:36:48.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="loadView"><a href="#loadView" class="headerlink" title="loadView"></a>loadView</h1><ol><li><p>作用：加载控制器的view</p></li><li><p>何时调用：当控制器的view第一次使用的时候就会调用</p></li><li><p>使用场景：只要想自定义控制器的view就调用此方法</p></li></ol><p>访问控制器的View就相当于调用控制器中的view get方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">-(UIView *)view&#123;</div><div class="line">    if(_view == nil)&#123;</div><div class="line">        [self loadView];</div><div class="line">        [self viewDidload];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    return _view;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="控制器加载view的流程"><a href="#控制器加载view的流程" class="headerlink" title="控制器加载view的流程"></a>控制器加载view的流程</h1><p><img src="http://upload-images.jianshu.io/upload_images/2287777-b6128646373dfffb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017-7-16-01.png"></p><ul><li>控制器的init方法底层会调用initWithNibName方法</li></ul><p>MyViewController *vc = [[MyViewController alloc] init];</p><p>注意点：</p><ul><li><p>系统做判断的前提提条件：没有指定nibName；没有自定义loadView方法；控制器以…Controller命名</p></li><li><p>判断原则：</p></li><li><p>1、判断下有没有指定nibName，如果指定了就去加载nib</p></li><li><p>2、判断有没有跟控制器同名的xib，但是xib的名称不带Controller的xib，如果有就去加载</p></li><li><p>3、如果第二步没有指定，就判断有没有跟控制器类名同名的xib，如果有就去加载</p></li><li><p>4、如果没有任何xib描述控制器的view，就不加载xib</p></li></ul><h2 id="MyViewController加载view的处理"><a href="#MyViewController加载view的处理" class="headerlink" title="MyViewController加载view的处理"></a>MyViewController加载view的处理</h2><ul><li><p>判断有没有指定xibName，如果有就去加载指定的xib</p></li><li><p>判断有没有跟控制器类名同名的xib，但是名字不带controller</p></li><li><p>判断有没有跟控制器类名同名的xib，有就去加载</p></li><li><p>直接创建一个空的xib</p></li></ul><p>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//在Appdelegate中</div><div class="line">ViewController *vc = [[ViewController alloc] init];</div><div class="line">vc.view.backgroundColkor = [UIColor redColor];</div><div class="line">self.window.rootViewController = vc;</div><div class="line">[pself.window makeKeyAndVisable];</div><div class="line"></div><div class="line">//ViewController</div><div class="line">-(UIView *)view&#123;</div><div class="line">    if(!_view)&#123;</div><div class="line">        [self loadView];</div><div class="line">        [self viewDidLoad];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)loadView&#123;</div><div class="line">    UIView*view = [[UIView alloc] initWithFrame:[UIScreen mainScreen].bounds];</div><div class="line">    view.backgroundColor = [UIColor greenColor];    self.view = view;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)viewDidload&#123;</div><div class="line">    [super viewDidload];</div><div class="line">    self.view.backgroundColor = [UIColor brownColor];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="请问此时界面颜色是什么？"><a href="#请问此时界面颜色是什么？" class="headerlink" title="请问此时界面颜色是什么？"></a>请问此时界面颜色是什么？</h3><p>可能很多人会回到绿色。其实答案是 红色</p><p>why？在AppDelegate中vc.view.backgroundColor就是调用vc的view的getter方法，在getter方法内部判断_view是否存在，不存在则新建一个UIView，新建view是通过[self loadView]方法创建，创建成功直接调用viewdidload方法；存在则直接返回，所以界面先是绿色，再是棕色最后是红色</p><h4 id="来一个官方解释"><a href="#来一个官方解释" class="headerlink" title="来一个官方解释"></a>来一个官方解释</h4><p><img src="http://upload-images.jianshu.io/upload_images/2287777-8ff7c3b976ffb29a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="官方解释"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;loadView&quot;&gt;&lt;a href=&quot;#loadView&quot; class=&quot;headerlink&quot; title=&quot;loadView&quot;&gt;&lt;/a&gt;loadView&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;作用：加载控制器的view&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;何时调用：当
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>JSON的一些骚操作</title>
    <link href="http://yoursite.com/2017/10/16/JSON%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/10/16/JSON的一些骚操作/</id>
    <published>2017-10-16T08:40:01.000Z</published>
    <updated>2017-10-16T08:40:30.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>将json转换为对象JSON.parse()函数的第二个参数用来转换解析出的属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">JSON.parse(&apos;&#123;&quot;name&quot;:&quot;lbp&quot;,&quot;age&quot;:&quot;20&quot;&#125;&apos;,function(key,value)&#123;</div><div class="line">if(key == &quot;name&quot;)&#123;</div><div class="line">return value + &quot;同学&quot;;</div><div class="line">&#125;</div><div class="line">return value;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>将对象转换为json，JSON.stringify()函数的第二个参数用来筛选对象的键值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var student = &#123;&quot;name&quot;:&quot;小米&quot;,&quot;age&quot;:22,&quot;height&quot;:177,&quot;skills&quot;:[&quot;js&quot;,&quot;oc&quot;]&#125;;</div><div class="line">function convert(key,value)&#123;</div><div class="line">if (typeof value === &quot;string&quot;) &#123;</div><div class="line">return value.toString().toUpperCase();</div><div class="line">&#125;</div><div class="line">return value;</div><div class="line">&#125;</div><div class="line">JSON.stringify(student,convert,&apos;  &apos;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;将json转换为对象JSON.parse()函数的第二个参数用来转换解析出的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2017/10/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/10/16/正则表达式/</id>
    <published>2017-10-16T08:38:59.000Z</published>
    <updated>2017-10-16T08:39:35.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>\d ：匹配一个数字</li><li>\w : 匹配任意一个字母或数字</li><li>. : 可以匹配任意字符串</li><li>* : 可以匹配任意个字符（包括0个）</li><li>+: 至少一个字符</li><li><p>? : 表示0个或1个字符</p></li><li><p>{n} :表示n个字符</p></li><li><p>{n-m} : 表示n-m个字符</p></li><li><p>[ ] ：表示范围</p></li><li><p>[0-9a-zA-Z\_] : 可以匹配一个数字、字母或者下划线</p></li><li><p>[0-9a-zA-Z\_]+: 可以匹配至少由一个数字、字母或者下划线组成的字符串</p></li><li><p>[0-9a-zA-Z_$][0-9a-zA-Z__$]* : 可以匹配由数字、字母或者下划线，后接任意个由一个数字、字母或者下划线、$组成的字符串</p></li></ul><h1 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h1><p>JS有2种方式创建一个正则表达式。</p><p>第一种方式是直接通过/正则表达式/写出来。</p><p>第二种 是通过new RegExp(‘正则表达式’)创建一个RegExp对象。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>因为第二种的写法问题，所以每个<code>\</code>  需要转义，也就是 <code>\\</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">function test()&#123;</div><div class="line">var node = document.getElementById(&quot;validate&quot;).value;</div><div class="line">var regStr = /^[0-9a-zA-Z]&#123;3,8&#125;\s*\d[3-8]*$/;</div><div class="line">var regStr2 = new RegExp(&apos;^[0-9a-zA-Z]&#123;3,8&#125;\\s*\\d[3-8]*$&apos;);</div><div class="line">console.log(regStr2.test(node));</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入&quot; id=&quot;validate&quot; /&gt;</div><div class="line">&lt;button  onclick=&quot;test()&quot;&gt;检测&lt;/button&gt;</div></pre></td></tr></table></figure><h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><p>除了简单地判断是否匹配外，正则表达式还可以用来提取分组 ，用 <code>()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">function test()&#123;</div><div class="line">var node = document.getElementById(&quot;validate&quot;).value;</div><div class="line">var regStr = /^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$/;</div><div class="line">var regStr2 = new RegExp(&apos;^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$&apos;);</div><div class="line">console.log(regStr2.exec(node));</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入&quot; id=&quot;validate&quot; /&gt;</div><div class="line">&lt;button  onclick=&quot;test()&quot;&gt;检测&lt;/button&gt;</div></pre></td></tr></table></figure><ul><li><p>如果正则表达式中定义了组，就可以在RegExp对象上用exec()方法提取出子串来。</p></li><li><p>exec()方法在匹配成功后会返回一个Array，第一个元素为正则表达式匹配到的整个字符串，后面的元素则表示匹配成功的子串。</p></li><li>exec()方法在匹配失败后会返回null</li></ul><h1 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h1><p>由于 正则表达式默认使用贪婪匹配模式，因此会造成一些问题。比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var res = /^(\d+)(0*)$/;</div><div class="line">res.exec(&apos;102300&apos;);        //[&apos;102300&apos;,&apos;102300&apos;,&apos;&apos;]</div></pre></td></tr></table></figure><p>由于\d+采用贪婪匹配模式，所以会匹配到后面的0，所以加上\d+?代表使用非贪婪匹配模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var res = /^(\d+?)(0*)$/;</div><div class="line">res.exec(&apos;102300&apos;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;\d ：匹配一个数字&lt;/li&gt;
&lt;li&gt;\w : 匹配任意一个字母或数字&lt;/li&gt;
&lt;li&gt;. : 可以匹配任意字符串&lt;/li&gt;
&lt;li&gt;* : 可以匹配任意个字符（包括0个）&lt;/li&gt;
&lt;li&gt;+: 至少一个字符&lt;/li&gt;
&lt;li&gt;&lt;p&gt;? : 表示0个或1个
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>generator函数</title>
    <link href="http://yoursite.com/2017/10/16/generator%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/10/16/generator函数/</id>
    <published>2017-10-16T08:32:20.000Z</published>
    <updated>2017-10-16T08:39:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>generator（生成器）是ES6标准引入的新的数据类型，一个generator看上起像一个函数，但是可以返回多次.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">&apos;use strict&apos;;</div><div class="line">function *foo(max)&#123;</div><div class="line">var n = 0;</div><div class="line">while(n&lt;max)&#123;</div><div class="line">yield n;</div><div class="line">n++;</div><div class="line">&#125;</div><div class="line">return n;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var f = foo(3);</div><div class="line">//方式1</div><div class="line">console.log(f.next());</div><div class="line">console.log(f.next());</div><div class="line">console.log(f.next());</div><div class="line">console.log(f.next());</div><div class="line">//方式2</div><div class="line">for(var f of foo(3))&#123;</div><div class="line">console.log(f);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><ul><li>next()方法会执行一个generator的代码，然后每次遇到yield x；就返回一个对象{value:x,done:true/false},然后暂停。返回的value就是yield的返回值，done表示这个generator是否已经执行结束了，如果为done为true则value就是return的返回值。</li><li>当执行到done为true时，这个generator对象就已经全部执行完毕，就不要再继续调用next()</li><li>第2个方法就是直接调用for…of循环迭代generator对象，这种方式不需要我们自己判断done</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>generator：可以把异步代码变成“同步”代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">try&#123;</div><div class="line">r1 = yield ajax(&quot;http://test1.com/get&quot;,data1);</div><div class="line">r2 = yield ajax(&quot;http://test1.com/get&quot;,data1);</div><div class="line">r3 = yield ajax(&quot;http://test1.com/get&quot;,data1);</div><div class="line">success(r3);</div><div class="line">&#125;catch(e)&#123;</div><div class="line">//TODO handle the exception</div><div class="line">handle(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;generator（生成器）是ES6标准引入的新的数据类型，一个generator看上起像一个函数，但是可以返回多次.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>HyBrid探索（一）</title>
    <link href="http://yoursite.com/2017/10/13/HyBrid%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/13/HyBrid探索（一）/</id>
    <published>2017-10-13T07:50:05.000Z</published>
    <updated>2017-10-13T08:29:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="UIWebView加载网页内容"><a href="#UIWebView加载网页内容" class="headerlink" title="UIWebView加载网页内容"></a>UIWebView加载网页内容</h4><p>可以通过本地文件、url等方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *htmlPath = [[NSBundle mainBundle] pathForResource:@&quot;index&quot; ofType:@&quot;html&quot;];</div><div class="line">NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL fileURLWithPath:htmlPath]];</div><div class="line">[self.webView loadRequest:request];</div></pre></td></tr></table></figure><h4 id="Native调用JavaScript"><a href="#Native调用JavaScript" class="headerlink" title="Native调用JavaScript"></a>Native调用JavaScript</h4><p>Native调用JS是通过UIWebView的stringByEvaluatingJavaScriptFromString 方法实现的，该方法返回js脚本的执行结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[webView stringByEvaluatingJavaScriptFromString:@&quot;Math.random();&quot;];</div></pre></td></tr></table></figure><p>实际上就是调用了网页的Window下的一个对象。如果我们需要让native端调用js方法，那么这个js方法必须在window下可以访问到。</p><h4 id="JavaScript调用Native"><a href="#JavaScript调用Native" class="headerlink" title="JavaScript调用Native"></a>JavaScript调用Native</h4><p>反过来，JavaScript调用Native，并没有现成的API可以调用，而是间接地通过一些其它手段来实现。UIWebView有个代理方法：在UIWebView内发起的任何网络请求都可以通过delegate函数在Native层得到通知。由此思路，我们就可以在UIWebView内发起一个自定义的网络请求，通常是这样的格式：<strong>jsbridge://methodName?param1=value1&amp;param2=value2…</strong></p><p>在UIWebView的delegate函数中，我们判断请求的scheme，如果request.URL.scheme是jsbridge，那么就不进行网页内容的加载，而是去执行相应的方法。方法名称就是request.URL.host。参数可以通过request.URL.query得到。</p><p>问题来了？？</p><p>发起这样1个网络请求有2种方式。1:location.href .2：iframe。通过location.href有个问题，就是如果js多次调用原生的方法也就是location.href的值多次变化，Native端只能接受到最后一次请求，前面的请求会被忽略掉。</p><p>使用ifrmae方式，以调用Native端的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var iFrame;</div><div class="line">iFrame = document.createElement(&quot;iframe&quot;);</div><div class="line">iFrame.style.height = &quot;1px&quot;;</div><div class="line">iFrame.style.width = &quot;1px&quot;;</div><div class="line">iFrame.style.display = &quot;none&quot;;</div><div class="line">iFrame.src = url;</div><div class="line">document.body.appendChild(iFrame);</div><div class="line">setTimeout(function()&#123;</div><div class="line">iFrame.remove();</div><div class="line">&#125;,100);</div></pre></td></tr></table></figure><p>举个🌰：</p><p>需求：</p><p>原生端提供一个UIWebView，加载一个网页内容。还有1个按钮，按钮点击一下网页增加一段段落文本。网页上有2个输入框，用户输入数字，点击按钮，js将用户输入的参数告诉native端，native去执行加法，计算完成后将结果返回给js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">//index.html</div><div class="line"></div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf8&quot;&gt;</div><div class="line">&lt;script language=&quot;javascript&quot;&gt;</div><div class="line">function loadURL(url)&#123;</div><div class="line">var iFrame;</div><div class="line">iFrame = document.createElement(&quot;iframe&quot;);</div><div class="line">iFrame.style.height = &quot;1px&quot;;</div><div class="line">iFrame.style.width = &quot;1px&quot;;</div><div class="line">iFrame.style.display = &quot;none&quot;;</div><div class="line">iFrame.src = url;</div><div class="line">document.body.appendChild(iFrame);</div><div class="line">setTimeout(function()&#123;</div><div class="line">iFrame.remove();</div><div class="line">&#125;,100);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function receiveValue(value)&#123;</div><div class="line">alert(&quot;从原生拿到加法结果为：&quot;+value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function check() &#123;</div><div class="line">var par1 = document.getElementById(&quot;par1&quot;).value;</div><div class="line">var par2 = document.getElementById(&quot;par2&quot;).value;</div><div class="line">loadURL(&quot;JSBridge://plus?par1=&quot; + par1 +&quot;&amp;par2=&quot; + par2);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入数字&quot;  id=&quot;par1&quot;／&gt; + &lt;input type=&quot;text&quot; placeholder=&quot;请输入数字&quot;  id=&quot;par2&quot;／&gt;</div><div class="line">&lt;input type=&quot;button&quot; value=&quot;=&quot; onclick=&quot;check()&quot; /&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//ViewController.m</div><div class="line"></div><div class="line">-(void)addContentToWebView&#123;</div><div class="line">NSString *jsString = @&quot; var pNode = document.createElement(\&quot;p\&quot;); pNode.innerText = \&quot;我是由原生代码调用js后将一段文件添加到html上，也就是注入\&quot;;document.body.appendChild(pNode);&quot;;</div><div class="line">[self.webView stringByEvaluatingJavaScriptFromString:jsString];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">-(NSInteger)plusparm:(NSInteger)par1 parm2:(NSInteger)par2&#123;</div><div class="line">return par1 + par2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">#pragma mark -- UIWebViewDelegate</div><div class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType&#123;</div><div class="line">NSURL *url = request.URL;</div><div class="line">NSString *scheme = url.scheme;</div><div class="line">NSString *method = url.host;</div><div class="line">NSString *parms =  url.query;</div><div class="line">NSArray *pars = [parms componentsSeparatedByString:@&quot;&amp;&quot;];</div><div class="line">NSInteger par1 = [[pars[0] substringFromIndex:5] integerValue];</div><div class="line">NSInteger par2 = [[pars[1] substringFromIndex:5] integerValue];</div><div class="line">if ([scheme isEqualToString:@&quot;jsbridge&quot;]) &#123;</div><div class="line">//发现scheme是JSBridge，那么就是自定义的URLscheme，不去加载网页内容而拦截去处理事件。</div><div class="line"></div><div class="line">if ([method isEqualToString:@&quot;plus&quot;]) &#123;</div><div class="line">NSInteger result = [self plusparm:par1 parm2:par2];</div><div class="line">[self.webView stringByEvaluatingJavaScriptFromString:[NSString stringWithFormat:@&quot;receiveValue(%@);&quot;,@(result)]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">return NO;</div><div class="line">&#125;</div><div class="line">return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="同步和异步问题"><a href="#同步和异步问题" class="headerlink" title="同步和异步问题"></a>同步和异步问题</h4><p>js调用native是通过在一个网页上插入一个iframe，这个iframe插入完了就完了，执行的结果需要native另外调用stringByEvaluatingJavaScriptString 方法通知js。这明显是1个异步的调用。而stringByEvaluatingJavaScriptString方法会返回执行js脚本的结果。本质上是一个同步调用</p><p>所以js call native是异步，native call js是同步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;UIWebView加载网页内容&quot;&gt;&lt;a href=&quot;#UIWebView加载网页内容&quot; class=&quot;headerlink&quot; title=&quot;UIWebView加载网页内容&quot;&gt;&lt;/a&gt;UIWebView加载网页内容&lt;/h4&gt;&lt;p&gt;可以通过本地文件、url等方式。&lt;/
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>hitTest和pointInside方法你真的熟吗？</title>
    <link href="http://yoursite.com/2017/10/12/hitTest%E5%92%8CpointInside%E6%96%B9%E6%B3%95%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%86%9F%E5%90%97%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/10/12/hitTest和pointInside方法你真的熟吗？/</id>
    <published>2017-10-12T02:51:32.000Z</published>
    <updated>2017-10-12T02:52:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hittest方法"><a href="#hittest方法" class="headerlink" title="hittest方法"></a>hittest方法</h3><ul><li>就是用来寻找最合适的view</li><li>当一个事件传递给一个控件，就会调用这个控件的hitTest方法</li><li>点击了白色的view： 触摸事件 -&gt; UIApplication -&gt; UIWindow 调用 [UIWindow hitTest] -&gt; 白色view [WhteView hitTest]</li></ul><p>实验1:</p><p>定义 BaseView，在里面实现方法touchBegan，监听当前哪个类调用了该方法。</p><p>定义KeyWindow，在里面实现hitTest方法，监听哪个类调用了该方法，用来追踪判断哪个view是最合适的view</p><p>在控制器的界面上加5个颜色不同的view，每个view自定义view去实现，因此在不同的view上的手势就可以由不同的view拦截到。</p><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/Simulator%20Screen%20Shot%20-%20iPhone%206s%20Plus%20-%202017-10-11%20at%2010.14.37.png" alt="UI效果图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//KeyWindow</div><div class="line"></div><div class="line">-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</div><div class="line">UIView *view = [super hitTest:point withEvent:event];</div><div class="line">NSLog(@&quot;fittest-&gt;%@&quot;,view);</div><div class="line">return view;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>结果：</p><p>点击了白色1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">2017-10-11 16:48:52.882547+0800 主流App框架[16295:358790] BrownView--hitTest withEvent</div><div class="line">2017-10-11 16:48:59.646610+0800 主流App框架[16295:358790] GreenView--hitTest withEvent</div><div class="line">2017-10-11 16:48:59.647145+0800 主流App框架[16295:358790] fittest-&gt;&lt;UIView: 0x7f8f23406510; frame = (0 0; 414 736); autoresize = W+H; layer = &lt;CALayer: 0x60c000221840&gt;&gt;</div><div class="line">2017-10-11 16:48:59.647575+0800 主流App框架[16295:358790] BrownView--hitTest withEvent</div><div class="line">2017-10-11 16:48:59.647702+0800 主流App框架[16295:358790] GreenView--hitTest withEvent</div><div class="line">2017-10-11 16:48:59.647880+0800 主流App框架[16295:358790] fittest-&gt;&lt;UIView: 0x7f8f23406510; frame = (0 0; 414 736); autoresize = W+H; layer = &lt;CALayer: 0x60c000221840&gt;&gt;</div></pre></td></tr></table></figure><p>点击了蓝色3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">2017-10-11 16:49:56.331024+0800 主流App框架[16295:358790] BrownView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.331335+0800 主流App框架[16295:358790] BView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.331617+0800 主流App框架[16295:358790] BlueView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.331968+0800 主流App框架[16295:358790] YellowView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.333206+0800 主流App框架[16295:358790] fittest-&gt;&lt;BlueView: 0x7f8f23406f10; frame = (19 21; 240 128); autoresize = RM+BM; layer = &lt;CALayer: 0x60c0002218c0&gt;&gt;</div><div class="line">2017-10-11 16:49:56.333633+0800 主流App框架[16295:358790] BrownView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.333762+0800 主流App框架[16295:358790] BView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.333893+0800 主流App框架[16295:358790] BlueView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.334005+0800 主流App框架[16295:358790] YellowView--hitTest withEvent</div><div class="line">2017-10-11 16:49:56.334185+0800 主流App框架[16295:358790] fittest-&gt;&lt;BlueView: 0x7f8f23406f10; frame = (19 21; 240 128); autoresize = RM+BM; layer = &lt;CALayer: 0x60c0002218c0&gt;&gt;</div><div class="line">2017-10-11 16:49:56.334644+0800 主流App框架[16295:358790] BlueView</div></pre></td></tr></table></figure><p>那么看出来hitTest方法的作用就是找出最合适的view，那么我们可以指定任何事情的最合适的view为特定的view</p><p>实验2:</p><p>在KeyWindow中hitTest方法中返回BlueView，那么点击任何色块的view那么都会交给BlueView去处理事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//KeyWindow</div><div class="line">-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</div><div class="line">return self.subviews.firstObject.subviews.firstObject;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-10-11 22:48:46.102793+0800 主流App框架[21498:749663] GreenView</div><div class="line">2017-10-11 22:48:46.668595+0800 主流App框架[21498:749663] GreenView</div></pre></td></tr></table></figure><p>因为事件的响应者链条就是当用户操作屏幕会产生一个事件，该事件被系统加入到事件队列中去，UIApplication对象会将事件队列中最早加入进去的事件传递给window，然后window找到最合适的view去处理事件。因此任何事件都会先通过KeyWindow对象去判断并找到最合适的view</p><h2 id="2个重要的方法"><a href="#2个重要的方法" class="headerlink" title="2个重要的方法"></a>2个重要的方法</h2><ul><li><p>-(BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event： 用来判断触摸点是否在控件上</p></li><li><p>-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event： 用来判断控件是否接受事件以及找到最合适的view</p></li></ul><h2 id="模仿系统实现找出最合适的view"><a href="#模仿系统实现找出最合适的view" class="headerlink" title="模仿系统实现找出最合适的view"></a>模仿系统实现找出最合适的view</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//KeyWindow</div><div class="line"></div><div class="line">/**</div><div class="line">模仿系统实现寻找最合适的view步骤</div><div class="line">1、控件接收事件</div><div class="line">2、触摸点在自己身上</div><div class="line">3、从后往前遍历子控件，重复前面2个步骤</div><div class="line">4、如果没有符合条件的子控件，那么就自己最合适</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line">-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</div><div class="line">if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt;= 0.01) &#123;</div><div class="line">return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (![self pointInside:point withEvent:event]) &#123;</div><div class="line">return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (NSUInteger index = self.subviews.count - 1; index &gt;= 0; index--) &#123;</div><div class="line">CGPoint childViewPoint = [self convertPoint:point toView:self.subviews[index]];</div><div class="line">UIView *fitestView = [self.subviews[index] hitTest:childViewPoint withEvent:event];</div><div class="line">if (fitestView) &#123;</div><div class="line">return fitestView;</div><div class="line">&#125;</div><div class="line">return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>给出 一个Demo地址：<a href="https://github.com/FantasticLBP/BlogDemos/tree/master/模仿系统找出事件的最佳响应者" title="模仿系统找出事件的最佳响应者" target="_blank" rel="external">https://github.com/FantasticLBP/BlogDemos/tree/master/模仿系统找出事件的最佳响应者</a></p><p>实验：</p><p>在控制器（ViewController）的view上先添加一个UIButton，再添加一个自定义的UIView(ShelterView),盖在button的上面。</p><p>需求：点击ShelterView上的点，如果点也在UIButton范围上则交给UIButton处理事件，如果不在UIButton上则交给ShelterView处理，如果点击屏幕上除了ShelterView之外的点则交给控制器的view处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">//ViewController</div><div class="line">-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123;</div><div class="line">NSLog(@&quot;viewController-&gt;%s&quot;,__func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//ShelterView</div><div class="line">#import &quot;ShelterView.h&quot;</div><div class="line"></div><div class="line">@implementation ShelterView</div><div class="line"></div><div class="line">-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123;</div><div class="line">NSLog(@&quot;%s&quot;,__func__);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</div><div class="line">NSLog(@&quot;%s&quot;,__func__);</div><div class="line">/**</div><div class="line">需求：不管点击按钮还是view都交给button处理</div><div class="line">思路：在view的hitTest方法中寻找最合适的view，那么返回nil告诉系统view不是最合适的view，那么系统则认为按钮是最合适的view</div><div class="line">return nil;</div><div class="line">*/</div><div class="line"></div><div class="line">//需求，在view上点击，如果点击范围在button上则由button进行处理事件；否则交给view处理事件</div><div class="line"></div><div class="line">UIView *button = nil;</div><div class="line">for (UIView *subView in self.superview.subviews) &#123;</div><div class="line">//判断事件的点是否在按钮上</div><div class="line">if ([subView isKindOfClass:[UIButton class]]) &#123;</div><div class="line">button =subView;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">CGPoint btnPoint = [self convertPoint:point toView:button];</div><div class="line">if ([button pointInside:btnPoint withEvent:event]) &#123;</div><div class="line">return button;</div><div class="line">&#125;else&#123;</div><div class="line">//此时代表事件触摸点不在button上，但是也不能写nil，写nil的话点击屏幕上的其他地方系统会寻找最合适的view，此时返回nil（ return nil;），则代表view不是最合适的view,那么此时点击屏幕上除了按钮之外的区域，最合适的view就是控制器上面的view</div><div class="line">return [super hitTest:point withEvent:event];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><p>要看完整Demo，地址为：<a href="https://github.com/FantasticLBP/BlogDemos/tree/master/hitTest的神奇效果（一）" title="hitTest的神奇效果" target="_blank" rel="external">https://github.com/FantasticLBP/BlogDemos/tree/master/hitTest的神奇效果（一）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hittest方法&quot;&gt;&lt;a href=&quot;#hittest方法&quot; class=&quot;headerlink&quot; title=&quot;hittest方法&quot;&gt;&lt;/a&gt;hittest方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;就是用来寻找最合适的view&lt;/li&gt;
&lt;li&gt;当一个事件传递给一个控件
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>事件响应者链</title>
    <link href="http://yoursite.com/2017/10/12/%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E8%80%85%E9%93%BE/"/>
    <id>http://yoursite.com/2017/10/12/事件响应者链/</id>
    <published>2017-10-12T02:49:55.000Z</published>
    <updated>2017-10-13T08:53:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>实验1:</p><p>定义 BaseView，在里面实现方法touchBegan，监听当前哪个类调用了该方法。</p><p>在控制器的界面上加5个颜色不同的view，每个view自定义view去实现，因此在不同的view上的手势就可以由不同的view拦截到。</p><p><img src="https://github.com/FantasticLBP/iOSKonwledge-Kit/blob/master/assets/Simulator%20Screen%20Shot%20-%20iPhone%206s%20Plus%20-%202017-10-11%20at%2010.14.37.png?raw=true" alt="UI效果图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//BaseView</div><div class="line">#import &quot;BaseView.h&quot;</div><div class="line"></div><div class="line">@implementation BaseView</div><div class="line">-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123;</div><div class="line">NSLog(@&quot;%@&quot;,[self class]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>结果：点击不同的View打印出不同的类名。</p><p>结论：</p><ul><li>触摸事件是从父控件传递到子控件的。</li><li>点击了绿色（图上的2级）的view：UIApplication-&gt; UIWindow -&gt; UIViewController的view -&gt; 绿色的view</li><li>点击了蓝色（图上的3级）的view：UIApplication-&gt; UIWindow -&gt; UIViewController的view -&gt; 红棕色的view -&gt; 蓝色的view</li><li>点击了黄色（图上的4级）的view：UIApplication -&gt; UIWindow -&gt; UIViewController的view -&gt; 红棕色的view -&gt; 蓝色的view -&gt; 黄色的view</li></ul><p>注意：如果父控件不能接收触摸事件，那么这个父控件的子控件也不能接收触摸事件</p><h4 id="如何找到最合适的控件来接收触摸事件？"><a href="#如何找到最合适的控件来接收触摸事件？" class="headerlink" title="如何找到最合适的控件来接收触摸事件？"></a>如何找到最合适的控件来接收触摸事件？</h4><ul><li>自己能否接收触摸事件？</li><li>触摸点是否在自己身上？</li><li>从后往前遍历子控件，重复前面2个步骤</li><li>如果没有符合条件的子控件，那么就自己最适合处理</li></ul><h1 id="事件响应原理"><a href="#事件响应原理" class="headerlink" title="事件响应原理"></a>事件响应原理</h1><p>产生的touch方法的默认做法是将事件顺着响应者链条向上传递，将事件交给上一个响应者处理。</p><h4 id="响应者链条"><a href="#响应者链条" class="headerlink" title="响应者链条"></a>响应者链条</h4><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/响应者链条.png" alt="响应者链条"></p><h4 id="事件传递的完整过程"><a href="#事件传递的完整过程" class="headerlink" title="事件传递的完整过程"></a>事件传递的完整过程</h4><ol><li>先将事件对象由上往下传递（父控件传递给子控件），找到最合适的控件来处理</li><li>调用最合适控件的touch方法</li><li>如果调用了[super touches…]方法就会将事件顺着响应者链条向上传递，传递给上一个响应者</li><li>接着就会调用上一个响应者的touches…方法</li></ol><h4 id="事件响应者"><a href="#事件响应者" class="headerlink" title="事件响应者"></a>事件响应者</h4><h5 id="如何判断该控件的上一个响应者？"><a href="#如何判断该控件的上一个响应者？" class="headerlink" title="如何判断该控件的上一个响应者？"></a>如何判断该控件的上一个响应者？</h5><ol><li>如果当前这个view是控制器的view，那么上一个响应者就是控制器</li><li>如果当前这个view不是控制器的view，那么上一个响应者就是父控件。</li></ol><p>事件传递给UIApplication后如果不处理的话，该事件会销毁掉。</p><p>控制器view上的子控件的touch…方法如果子控件不处理那么都会顺着响应者链条向上传递给上一层响应者对象，比如可以交给控制器处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实验1:&lt;/p&gt;
&lt;p&gt;定义 BaseView，在里面实现方法touchBegan，监听当前哪个类调用了该方法。&lt;/p&gt;
&lt;p&gt;在控制器的界面上加5个颜色不同的view，每个view自定义view去实现，因此在不同的view上的手势就可以由不同的view拦截到。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>iOS中的事件</title>
    <link href="http://yoursite.com/2017/10/12/iOS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/10/12/iOS中的事件/</id>
    <published>2017-10-12T02:48:39.000Z</published>
    <updated>2017-10-12T02:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>用户在使用App的时候会产生各种事件</li><li>触摸事件、重力加速计事件、远程遥控事件</li><li>只有继承自UIResponder才可以响应事件</li><li>UIView、UIApplication、UIViewController都可以响应事件</li><li><h2 id="UIResponder"><a href="#UIResponder" class="headerlink" title="UIResponder"></a>UIResponder</h2></li><li>UIResponder内部提供了一些方法处理事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//触摸事件</div><div class="line">-(void)touchBegan:(NSSet *)touches withEvent:(UIEvent *)event;</div><div class="line">-(void)touchMoved:(NSSet *)touches withEvent:(UIEvent *)event;</div><div class="line">-(void)touchEnded:(NSSet *)touches withEvent:(UIEvent *)event;</div><div class="line">-(void)touchCanceled:(NSSet *)touches withEvent:(UIEvent *)event;</div><div class="line"></div><div class="line">//加速计事件</div><div class="line">-(void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event;</div><div class="line">-(void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event;</div><div class="line">-(void)motionCanceled:(UIEventSubtype)motion withEvent:(UIEvent *)event;</div><div class="line"></div><div class="line">//远程控制事件</div><div class="line">-(void)remoteControlReceivedWithEvent:(UIEvent *)event;</div></pre></td></tr></table></figure><h1 id="事件的产生和传递"><a href="#事件的产生和传递" class="headerlink" title="事件的产生和传递"></a>事件的产生和传递</h1><ul><li>发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中去</li><li>UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常先分发事件给应用程序的主窗口（keyWindow）</li><li>主窗口会在视图层次结构中寻找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程中最重要的一步。</li></ul><p>找到合适的视图控件后，就会调用视图控件的touch方法来做具体的事件处理逻辑</p><h2 id="UIView不接收事件的3种情况"><a href="#UIView不接收事件的3种情况" class="headerlink" title="UIView不接收事件的3种情况"></a>UIView不接收事件的3种情况</h2><ol><li>不接收用户交互。view.userInteractionEnabled = NO</li><li>隐藏。view.hidden = YES</li><li>透明度很低。view.alpha = 0.0 ~ 0.01</li></ol><p>注意：UIImageView的userInteractionEnabled默认为NO，因此UIImageView及其它上面的子控件默认是不能接受触摸事件的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;用户在使用App的时候会产生各种事件&lt;/li&gt;
&lt;li&gt;触摸事件、重力加速计事件、远程遥控事件&lt;/li&gt;
&lt;li&gt;只有继承自UIResponder才可以响应事件&lt;/li&gt;
&lt;li&gt;UIView、UIApplication、UIViewController都可以响
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>抓包工具 - Charles初见</title>
    <link href="http://yoursite.com/2017/10/10/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7-Charles%E5%88%9D%E8%A7%81/"/>
    <id>http://yoursite.com/2017/10/10/抓包工具-Charles初见/</id>
    <published>2017-10-10T06:56:48.000Z</published>
    <updated>2017-10-10T06:58:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>一、 下载地址<br>Charles的下载地址：<a href="https://pan.baidu.com/s/1sl8bE93" target="_blank" rel="external">https://pan.baidu.com/s/1sl8bE93</a><br>因为Charles只有30天的试用期，所以在这里给一个破解版的包：<a href="https://pan.baidu.com/s/1cHtE0m" target="_blank" rel="external">https://pan.baidu.com/s/1cHtE0m</a><br>二、破解方法<br>1、像正常安装应用一样，点击安装，之后将应用包拖到Application目录中。<br>2、右击Charles.app，显示包内容，然后将第二个链接下载下来的破解包复制黏贴到此目录下替换。<br>三、使用教程<br>1、Charles上的设置。<br>    在Charles的菜单栏上选择”Proxy” -&gt; “Proxy Settings”,填入代理端口8888，并且勾选”Enable transparent HTTP proxying”,就完成了Charles上的设置，如下图所示：<br>    <img src="http://upload-images.jianshu.io/upload_images/2287777-6b827146b1c1cd36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>    <img src="http://upload-images.jianshu.io/upload_images/2287777-b2c552dfef180bd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>    2 、在电脑“系统偏好设置”中心打开网络查看本机ip地址，打开手机“设置”-&gt;“无线局域网”，进入选中的网络，HTTP代理选中“手动”。服务器处填写电脑ip地址，端口写8888。设置好后，我们打开iPhone上的任意需要网络通讯的程序，就可以看到Charles弹出请求的确认菜单，单击”Allow”按钮，即可完成设置。<br>    <img src="http://upload-images.jianshu.io/upload_images/2287777-5691a767f7f4c5b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre><code>例子：页面![](http://upload-images.jianshu.io/upload_images/2287777-f3aa893eddb3f79c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)抓包图![](http://upload-images.jianshu.io/upload_images/2287777-1b9e8848529d704b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)![](http://upload-images.jianshu.io/upload_images/2287777-be562c35ee4972d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、 下载地址&lt;br&gt;Charles的下载地址：&lt;a href=&quot;https://pan.baidu.com/s/1sl8bE93&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pan.baidu.com/s/1sl8bE93&lt;/a&gt;&lt;br
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>URL-Schemes深度剖析（上）</title>
    <link href="http://yoursite.com/2017/10/10/URL-Schemes%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/10/URL-Schemes深度剖析（上）/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:53:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>###自定义URL Schemes###</p><p>1、引言</p><p>URL Schemes 应用在 iOS 上已经很久了。对于使用者来说，在沙盒机制下的 iOS 中，如果想做到一定程度上的自动化就不可避免地要用到 URL Schemes。但因为 URL Schemes 的使用方式不像传统 iOS 使用者接触到的图形界面那样可以直观地点来点去，造成了对它有兴趣的人（尤其是对英文有恐惧的人）一定程度上理解的困难。</p><p>2、简介苹果的沙盒机制</p><p>苹果选择沙盒来保障用户的隐私和安全，但沙盒也阻碍了应用间合理的信息共享，于是有了 URL Schemes 这个解决办法。</p><p>一般来说，我们使用的智能设备上有许多我们的个人信息。比如：联系方式、银行卡/信用卡信息、支付宝/Paypal/各大商城的账户密码、照片甚至行程与位置信息等。</p><p>如果说，你设备上的每一个应用，不管是官方的还是你从任何商城安装的应用都可以随意地获取这些信息，那么你轻则收到骚扰信息和邮件、重则后果不堪设想。如何让这些信息不被其它应用随意使用，或者说，如何让这些信息仅在设备所有者本人知情并允许的情况下被使用，是所有智能设备与操作系统所要在乎的核心安全问题。</p><p>在 iOS 这个操作系统中，针对这个问题，苹果使用了名为「沙盒」的机制：应用只能访问它声明可能访问的资源。一切提交到 App Store 的应用都必须遵守这个机制。</p><p>在安全方面沙盒是个很好的解决办法，但是有些矫枉过正。敏感的个人信息我们不愿意透露，却不代表所有的信息我们都不想与其它应用共享。</p><p>比如说我们要一次性地（没错，只按一次）把多个事件放到日历中，这些事件包含日期时间以及持续时间等信息，如果 App 之间信息不能沟通，就无法做到这点。（在下文中的 x-callback-URL 的部分会详述整个过程）</p><p>类似于一次性添加多个日历事件这样的，我们在使用智能设备的过程中会遇到很多不必要的重复的步骤。大多数人对这些重复的步骤是不自觉的，就像当自己电脑里有一批文件需要批量重命名的时候，他们机械地重复着重命名的过程。但是当我们掌握了这些设备运行的模式，或者有了一些工具，我们就能将这些重复的步骤全部节省下来。在 iOS 上，我们可以利用的工具就是 URL Schemes。</p><p>3、URL Schemes 是什么</p><p>Custom URL scheme 的好处就是，你可以在其它程序中通过这个url打开应用程序。如Ａ应用程序注册了一个url scheme:myApp, 那么就在mobile浏览器中就可以通过<a href="href=’myApp://’">href=’myApp://’</a>打开你的应用程序Ａ。</p><p>对比网页url就比较好理解url scheme。给出一个url “<a href="http://bxu2359670321.my3w.com/view/login.php”，它的格式：protocol" target="_blank" rel="external">http://bxu2359670321.my3w.com/view/login.php”，它的格式：protocol</a> :// hostname[:port] / path / [;parameters][?query]#fragment。<br>因此这个url的protocol就是http。对比URL Scheme，给出例子“weixin://dl/moments“，前面的weixin:就代表微信的scheme。你可以完全按照理解一个网页的 URL ——也就是它的网址——的方式来理解一个 iOS 应用的 URL。即Scheme是<strong>://</strong>之前的那段字符</p><p>###注意###</p><p>1、所有的网页都有url；但未必所有的应用都有自己的 URL Schemes，更不是每个应用的每个功能都有相应的 URL Schemes</p><p>2、一个网址只对应一个网页，但并非每个 URL Schemes 都只对应一款应用。这点是因为苹果没有对 URL Schemes 有不允许重复的硬性要求</p><p>3、一般网页的 URL 比较好预测，而 iOS 上的 URL Schemes 因为没有统一标准，所以非常难猜，通过猜来获取 iOS 应用的 URL Schemes 是不现实的。（我推荐将Bundle identifier反转） </p><p>###上干货###</p><p>1、注册自定义 URL Scheme</p><p>1）注册自定义 URL Scheme 的第一步是创建 URL Scheme — 在 Xcode Project Navigator 中找到并点击工程 info.plist 文件。当该文件显示在右边窗口，在列表上点击鼠标右键，选择 Add Row:</p><p><img src="http://upload-images.jianshu.io/upload_images/2287777-e22f24acf7823cfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="url scheme1.png"></p><p>2）点击左边剪头打开列表，可以看到 Item 0，一个字典实体。展开 Item 0，可以看到 URL Identifier，一个字符串对象。该字符串是你自定义的 URL scheme 的名字。建议采用反转Bundle idenmtifier的方法保证该名字的唯一性</p><p><img src="http://upload-images.jianshu.io/upload_images/2287777-67f09fb472c6b87d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="url scheme2.png"></p><p>3）点击 Item 0 新增一行，从下拉列表中选择 URL Schemes，敲击键盘回车键完成插入。（注意 URL Schemes 是一个数组，允许应用定义多个 URL schemes。）展开该数据并点击 Item 0。你将在这里定义自定义 URL scheme 的名字。只需要名字，不要在后面追加 ://</p><p><img src="http://upload-images.jianshu.io/upload_images/2287777-b9c1d5245529fa1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="url scheme3.png"></p><p>2、拿浏览器坐简单验证</p><p>在地址栏中熟入自定的url scheme。此时必须保证该浏览器所在设备上已经安装了具有自定义url scheme的App。</p><p><img src="http://upload-images.jianshu.io/upload_images/2287777-93cc952da314d7bf.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IMG_5739.PNG"></p><p>3、新建Xcode工程，做个App试试看，这里我就放一个Button，点击打开url<br>代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (IBAction)open:(id)sender &#123;</div><div class="line">    NSString *url = @&quot;zhunaer://?name=lbp&amp;age=22&quot;;</div><div class="line">    if ([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:url]]) &#123;</div><div class="line">           [[UIApplication sharedApplication] openURL:[NSURL URLWithString:url]];</div><div class="line">    &#125;else&#123;</div><div class="line">        NSLog(@&quot;打不开&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>结果打不开，为什么？<br>因为在新建App的plist中没加query schemes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;</div><div class="line">&lt;array&gt;</div><div class="line">&lt;string&gt;zhunaer&lt;/string&gt;</div><div class="line">&lt;/array&gt;</div></pre></td></tr></table></figure><p>4、如果需要在2个App之间传值，怎么办？可以用URL Scheme解决。</p><p>在被打开的App的Appdelegate.m中实现-(BOOL)application:(UIApplication <em>)application openURL:(nonnull NSURL </em>)url sourceApplication:(nullable NSString *)sourceApplication annotation:(nonnull id)annotation；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-(BOOL)application:(UIApplication *)application openURL:(nonnull NSURL *)url sourceApplication:(nullable NSString *)sourceApplication annotation:(nonnull id)annotation&#123;</div><div class="line">    NSLog(@&quot;calling application bundle id: %@&quot;,sourceApplication);</div><div class="line">    NSLog(@&quot;url shceme:%@&quot;,[url scheme]);</div><div class="line">    NSLog(@&quot;参数:%@&quot;,[url query]);</div><div class="line">    if ([sourceApplication isEqualToString:@&quot;com.geek.test1&quot;]) &#123;</div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line">    return NO;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在需要打开第三方App的点击事件处的url处后面加上参数，类似NSString *url = @”zhunaer://?name=lbp&amp;age=22”;</p><p>注意：在URL Scheme后加?然后跟网页的url的参数一样写法。</p><p>5、如何判断是指定App打开，或者某些App不让打开我们的App？<br>做了实验。</p><p>A：在需要打开第三方App的工程中将Bundle identifier改为“com.geek.test2”,其余不变</p><p>B：在被打开的App的AppDelegate.m中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-(BOOL)application:(UIApplication *)application openURL:(nonnull NSURL *)url sourceApplication:(nullable NSString *)sourceApplication annotation:(nonnull id)annotation&#123;</div><div class="line">    NSLog(@&quot;calling application bundle id: %@&quot;,sourceApplication);</div><div class="line">    NSLog(@&quot;url shceme:%@&quot;,[url scheme]);</div><div class="line">    NSLog(@&quot;参数:%@&quot;,[url query]);</div><div class="line">    if ([sourceApplication isEqualToString:@&quot;com.geek.test1&quot;]) &#123;</div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line">    return NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/2287777-5ddf86e7d30b1c05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Simulator Screen Shot 2017年5月1日 下午2.48.21.png"></p><p>###实验结果###</p><p>依旧可以打开App，即使断点走入Return NO</p><p>结论：如果你想阻止其它应用调用你的应用，<strong>创建一个与众不同的 URL scheme</strong>。尽管这不能保证你的应用不会被调用，但至少大大降低了这种可能性。</p><p>参考：<a href="https://sspai.com/post/31500#01" target="_blank" rel="external">https://sspai.com/post/31500#01</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###自定义URL Schemes###&lt;/p&gt;
&lt;p&gt;1、引言&lt;/p&gt;
&lt;p&gt;URL Schemes 应用在 iOS 上已经很久了。对于使用者来说，在沙盒机制下的 iOS 中，如果想做到一定程度上的自动化就不可避免地要用到 URL Schemes。但因为 URL Sche
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>-last-child与-last-of-type你只是会用，有研究过区别吗？</title>
    <link href="http://yoursite.com/2017/10/10/-last-child%E4%B8%8E-last-of-type%E4%BD%A0%E5%8F%AA%E6%98%AF%E4%BC%9A%E7%94%A8%EF%BC%8C%E6%9C%89%E7%A0%94%E7%A9%B6%E8%BF%87%E5%8C%BA%E5%88%AB%E5%90%97%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/10/10/-last-child与-last-of-type你只是会用，有研究过区别吗？/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:48:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="last-child与-last-of-type"><a href="#last-child与-last-of-type" class="headerlink" title=":last-child与:last-of-type"></a>:last-child与:last-of-type</h1><blockquote><p>同学们遇到过给同一组元素的最后一个元素设置css失效的情况吗？我遇到过，当时使用:last-child居然不起作用，看到名字不科学啊，明明是“最后一个元素”，那为什么设置CSS失效呢？今天来一探究竟吧</p></blockquote><ul><li>先看一组<code>:last-child</code>正常工作的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">        &lt;title&gt;:last-child、:last-of-type&lt;/title&gt;</div><div class="line">        &lt;script src=&quot;../../lib/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;</div><div class="line">        &lt;style&gt;</div><div class="line">            ul &#123;</div><div class="line">                margin: 100px 0;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            li &#123;</div><div class="line">                list-style: circle;</div><div class="line">                border-bottom: 1px solid #000000;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            li:last-child &#123;</div><div class="line">                border-color: red;</div><div class="line">            &#125;</div><div class="line">        &lt;/style&gt;</div><div class="line"></div><div class="line">    &lt;/head&gt;</div><div class="line"></div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;1&lt;/li&gt;</div><div class="line">            &lt;li&gt;2&lt;/li&gt;</div><div class="line">            &lt;li&gt;3&lt;/li&gt;</div><div class="line">            &lt;!--&lt;p&gt;我是来骚扰的&lt;/p&gt;--&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/FantasticLBP/web/master/assets/屏幕快照%202017-06-17%20下午4.56.03.png" alt="效果图1" title="效果图1"></p><ul><li>再先看一组<code>:last-child</code>不正常工作的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">        &lt;title&gt;:last-child、:last-of-type&lt;/title&gt;</div><div class="line">        &lt;script src=&quot;../../lib/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;</div><div class="line">        &lt;style&gt;</div><div class="line">            ul &#123;</div><div class="line">                margin: 100px 0;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            li &#123;</div><div class="line">                list-style: circle;</div><div class="line">                border-bottom: 1px solid #000000;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            li:last-child &#123;</div><div class="line">                border-color: red;</div><div class="line">            &#125;</div><div class="line">        &lt;/style&gt;</div><div class="line"></div><div class="line">    &lt;/head&gt;</div><div class="line"></div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;1&lt;/li&gt;</div><div class="line">            &lt;li&gt;2&lt;/li&gt;</div><div class="line">            &lt;li&gt;3&lt;/li&gt;</div><div class="line">            &lt;p&gt;我是来骚扰的&lt;/p&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><img src="https://github.com/FantasticLBP/web/blob/master/assets/屏幕快照%202017-06-17%20下午4.57.23.png?raw=true" alt="效果图2" title="效果图2"></p><p>问题抛出来了，那么来研究下:last-child和:last-of-type究竟是何方神圣。</p><ol><li><p>:last-child：<strong>The last-child CSS pseudo-class represents the last element among a group of sibling elements.（:last-child这个css伪类代表的一组兄弟元素当中最后一个元素）但经过代码发现，它说的一组元素应该是指其父元素的所有子元素且类型为:last-child前面指定的类型的一组元素。</strong></p></li><li><p>:last-of-type：<strong>The last-of-type CSS pseudo-class represents the last element of its type among a group of sibling elements.（</strong>:last-of-type这个css伪类代表其类型的一组兄弟元素中的最后一个元素<strong>）所以它指的是和</strong>:last-of-type前面的元素类型一致的一组元素的最后一个元素</p></li></ol><p>同理：:nth-last-child和:nth-last-of-type的区别在于父元素的子元素中且与:nth-last-child前面的元素类型一致的最后一个元素</p><p>做个验证</p><ul><li>:nth-last-child可以正常工作的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;:last-child、:last-of-type&lt;/title&gt;</div><div class="line">&lt;script src=&quot;../../lib/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;style&gt;</div><div class="line">ul &#123;</div><div class="line">margin: 100px 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">li &#123;</div><div class="line">list-style: circle;</div><div class="line">border-bottom: 1px solid #000000;</div><div class="line">&#125;</div><div class="line">li:nth-last-child(1)&#123;</div><div class="line">border-color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;1&lt;/li&gt;</div><div class="line">&lt;li&gt;2&lt;/li&gt;</div><div class="line">&lt;li&gt;3&lt;/li&gt;</div><div class="line">&lt;!--&lt;p&gt;我是来骚扰的&lt;/p&gt;--&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><img src="https://github.com/FantasticLBP/web/blob/master/assets/屏幕快照%202017-06-17%20下午5.25.01.png?raw=true" alt="效果图3" title="效果图3"></p><ul><li>:nth-last-child不能正常工作的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"> &lt;html&gt;</div><div class="line"> &lt;head&gt;</div><div class="line"> &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line"> &lt;title&gt;:last-child、:last-of-type&lt;/title&gt;</div><div class="line"> &lt;script src=&quot;../../lib/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;</div><div class="line"> &lt;style&gt;</div><div class="line"> ul &#123;</div><div class="line"> margin: 100px 0;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> li &#123;</div><div class="line"> list-style: circle;</div><div class="line"> border-bottom: 1px solid #000000;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"> li:nth-last-child(1)&#123;</div><div class="line"> border-color: red;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> &lt;/style&gt;</div><div class="line"></div><div class="line"> &lt;/head&gt;</div><div class="line"></div><div class="line"> &lt;body&gt;</div><div class="line"> &lt;ul&gt;</div><div class="line"> &lt;li&gt;1&lt;/li&gt;</div><div class="line"> &lt;li&gt;2&lt;/li&gt;</div><div class="line"> &lt;li&gt;3&lt;/li&gt;</div><div class="line"> &lt;p&gt;我是来骚扰的&lt;/p&gt;</div><div class="line"> &lt;/ul&gt;</div><div class="line"> &lt;/body&gt;</div><div class="line"></div><div class="line"> &lt;/html&gt;</div></pre></td></tr></table></figure><p><img src="https://github.com/FantasticLBP/web/blob/master/assets/屏幕快照%202017-06-17%20下午4.57.23.png?raw=true" alt="效果图2" title="效果图2"></p><ul><li>接下来:nth-last-of-type闪亮登场</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;:last-child、:last-of-type&lt;/title&gt;</div><div class="line">&lt;script src=&quot;../../lib/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;style&gt;</div><div class="line">ul &#123;</div><div class="line">margin: 100px 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">li &#123;</div><div class="line">list-style: circle;</div><div class="line">border-bottom: 1px solid #000000;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">li:nth-last-of-type(1)&#123;</div><div class="line">border-color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;1&lt;/li&gt;</div><div class="line">&lt;li&gt;2&lt;/li&gt;</div><div class="line">&lt;li&gt;3&lt;/li&gt;</div><div class="line">&lt;p&gt;我是来骚扰的&lt;/p&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><img src="https://github.com/FantasticLBP/web/blob/master/assets/屏幕快照%202017-06-17%20下午5.25.01.png?raw=true" alt="效果图3" title="效果图3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;last-child与-last-of-type&quot;&gt;&lt;a href=&quot;#last-child与-last-of-type&quot; class=&quot;headerlink&quot; title=&quot;:last-child与:last-of-type&quot;&gt;&lt;/a&gt;:last-child与:
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>在内存剖析对象</title>
    <link href="http://yoursite.com/2017/10/10/%E5%9C%A8%E5%86%85%E5%AD%98%E5%89%96%E6%9E%90%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/10/10/在内存剖析对象/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象在内存中的存储"><a href="#对象在内存中的存储" class="headerlink" title="对象在内存中的存储"></a>对象在内存中的存储</h1><ul><li><p>栈、堆、BSS、数据段、代码段是什么？</p><ul><li><p>栈（stack）：又称作堆栈，用来存储程序的局部变量（但不包括static声明的变量，static修饰的数据存放于数据段中）。除此之外，在函数被调用时，栈用来传递参数和返回值。</p></li><li><p>堆（heap）：用于存储程序运行中被动态分配的内存段，它的大小并不固定，可动态的扩张和缩减。操作函数(malloc／free)</p></li><li><p>BSS段（bss segment）：通常用来存储程序中未被初始化的全局变量和静态变量的一块内存区域。BSS是英文Block Started by Symbol的简称。BSS段输入静态内存分配</p></li><li><p>数据段（data segment）：通常用来存储程序中已被初始化的全局变量和静态变量和字符串的一块内存区域</p></li><li><p>代码段（code segment）：通常是指用来存储程序可执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读，某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量。</p></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/内存.png" alt="内存" title="内存"></p><ul><li><h5 id="搞清楚上面的概念再来研究下对象在内存中如何存储？"><a href="#搞清楚上面的概念再来研究下对象在内存中如何存储？" class="headerlink" title="搞清楚上面的概念再来研究下对象在内存中如何存储？"></a>搞清楚上面的概念再来研究下对象在内存中如何存储？</h5></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person *p1 = [Person new]</div></pre></td></tr></table></figure><p>看这行代码，先来看几个注意点：</p><ul><li><p>new底层做的事情：</p><ul><li><p>在堆内存中申请1块合适大小的空间</p></li><li><p>在这块内存上根据类模版创建对象。类模版中定义了什么属性就依次把这些属性声明在对象中；对象中还存在一个属性叫做<strong>isa</strong>，是一个指针，指向对象所属的类在代码段中地址</p></li><li><p>初始化对象的属性。这里初始化有几个原则：a、如果属性的数据类型是基本数据类型则赋值为0；b、如果属性的数据类型是C语言的指针类型则赋值为NULL；c、如果属性的数据类型为OC的指针类型则赋值为nil。</p></li><li><p>返回堆空间上对象的地址</p></li></ul></li><li><p>注意</p><ul><li><p>对象只有属性，没有方法。包括类本身的属性和一个指向代码段中的类isa指针</p></li><li><p>如何访问对象的属性？指针名-&gt;属性名；本质：根据指针名找到指针指向的对象，再根据属性名查找来访问对象的属性值</p></li><li><p>如何调用方法？[指针名 方法];本质：根据指针名找到指针指向的对象，再发现对象需要调用方法，再通过对象的isa指针找到代码段中的类，再调用类里面方法</p></li></ul></li><li><p>为什么不把方法存储在对象中？</p><ul><li><p>因为以类为模版创建的对象只有属性可能不相同，而方法相同，如果堆区的对象里面也保存方法的话就会很重复，浪费了堆空间，因此将方法存储与代码段</p></li><li><p>所以一个类创建的n个对象的isa指针的地址值都相同，都指向代码段中的类地址</p></li></ul></li></ul><p><strong>做个小实验</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">@interface Person : NSObject&#123;</div><div class="line">    @public</div><div class="line">    int _age;</div><div class="line">    NSString *_name;</div><div class="line">    int *p;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)sayHi;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation Person</div><div class="line"></div><div class="line">-(void)sayHi&#123;</div><div class="line">    NSLog(@&quot;Hi, %@&quot;,_name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    Person *p1 = [Person new];</div><div class="line">    Person *p2 = [Person new];</div><div class="line">    Person *p3 = [Person new];</div><div class="line">    p1-&gt;_age = 20;</div><div class="line">    p2-&gt;_age = 20;</div><div class="line"></div><div class="line">    [p1 sayHi];</div><div class="line">    [p2 sayHi];</div><div class="line">    [p3 sayHi];</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person  *p1 = [Person new];</div></pre></td></tr></table></figure><p><strong>这句代码在内存分配原理如下图所示</strong></p><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/Untitled%20Diagram-2.png" alt="p1" title="p1"></p><p><strong>结论</strong></p><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-05-15%20下午5.35.17.png" alt="p1" title="p1"></p><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-05-15%20下午5.35.34.png" alt="p3" title="p3"></p><p><strong>可以 看到Person类的3个对象p1、p2、p3的isa的值相同。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对象在内存中的存储&quot;&gt;&lt;a href=&quot;#对象在内存中的存储&quot; class=&quot;headerlink&quot; title=&quot;对象在内存中的存储&quot;&gt;&lt;/a&gt;对象在内存中的存储&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;栈、堆、BSS、数据段、代码段是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>H5性能优化方面的探索</title>
    <link href="http://yoursite.com/2017/10/10/H5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E9%9D%A2%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
    <id>http://yoursite.com/2017/10/10/H5性能优化方面的探索/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="H5性能优化方面的探索"><a href="#H5性能优化方面的探索" class="headerlink" title="H5性能优化方面的探索"></a>H5性能优化方面的探索</h1><blockquote><p>H5很重要，很重要，很重要，重要的事情必须重复多遍，H5的优点：跨平台、迭代快、开发体验好。缺点：加载慢，用户体验差。所以在接下来很长一段时间内我将会从H5的几个缺点发面去研究如何优化。</p></blockquote><p>## </p><h2 id="一、缓存问题及其解决办法"><a href="#一、缓存问题及其解决办法" class="headerlink" title="一、缓存问题及其解决办法"></a>一、缓存问题及其解决办法</h2><p>经常遇到一个问题，H5页面由于缓存问题经常在H5发布新版本之后客户端App看不到最新的效果，之前由于杂七杂八的问题项目工期紧没好好研究，最近抽空研究了下缓存问题。</p><p>缓存问题具体表现为：UIWebview首次打开加载慢；第二次加载速度明显快；H5资源更新过后在App上看不到更改的效果</p><p>为此我认为是缓存造成的问题，我进入App目录下，看到Library下的Caches下面有很多文件名称很长的文件，点击预览可以看到是图片、css等，本来我想着找出H5资源缓存到App中的特点，然后用NSFileManager删除掉缓存文件，发现此路不通。</p><h4 id="我想通过控制变量法研究缓存是否存在。"><a href="#我想通过控制变量法研究缓存是否存在。" class="headerlink" title="我想通过控制变量法研究缓存是否存在。"></a>我想通过控制变量法研究缓存是否存在。</h4><h4 id="做了一个实验。步骤如下："><a href="#做了一个实验。步骤如下：" class="headerlink" title="做了一个实验。步骤如下："></a>做了一个实验。步骤如下：</h4><ul><li>用HBuilder（一个编辑器，开启后本机端口8020就可以访问网页）打开H5工程</li><li>在App的一个UIWebview页面上通过和电脑在同一个局域网的方式加载网页</li><li>在App上查看效果，观察某个元素的样式</li><li>在HBuilder编辑器中修改元素样式</li><li>在App上将UIWebView返回上一界面，再次进入查看该元素的样式</li><li>确定有没有变化，来确定有没有缓存</li></ul><p>结论：页面实时效果变化的，没有缓存</p><p>对比实验：</p><ul><li>用HBuilder（一个编辑器，开启后本机端口8020就可以访问网页）打开H5工程</li><li>git提交到服务端</li><li>在App的一个UIWebview页面上通过公网IP的方式加载网页</li><li>在App上查看效果，观察某个元素的样式</li><li>在HBuilder编辑器中修改元素样式</li><li>git提交后发布到服务器上</li><li>在App上将UIWebView返回上一界面，再次进入查看该元素的样式</li><li>确定有没有变化，来确定有没有缓存</li></ul><p>结论：页面没有看到最新的效果，明显缓存了。但是我很想知道为什么本地局域网的方式请求网页不会缓存，而通过公网IP的方式会缓存。</p><p>为此，我做了进一步的实验，用谷歌浏览器分别请求本地局域网和公网ip查看资源加载的情况。</p><p>1、公网IP<br><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-09-15%20下午5.56.28.png" alt=""></p><p>2、本地局域网</p><p><img src="https://raw.githubusercontent.com/FantasticLBP/iOSKonwledge-Kit/master/assets/屏幕快照%202017-09-15%20下午6.27.16.png" alt=""></p><p>关键词Status Code</p><p>结论：从图上可以看出本地局域网不管首次加载还是刷新都是直接请求；而通过局域网的方式请求：首次请求是从服务器上获取，在此刷新的时候是从（from memory cache）中获取的。</p><h4 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h4><p>局域网 的方式网速都比较快所以不会缓存；</p><p>公网IP的方式可能由于网速问题会将首次请求到的资源缓存下来。</p><p>所以确定缓存存在了，那么如何避免缓存？</p><ul><li>App在启动后请求一个接口，这个接口的目的是获取当前H5资源的版本号</li><li>将获得的版本号保存下来（App本地保存）</li><li>由于UIWebView上加载网页，发起网络请求都可以通过一个代理方法所拦截，所以我们可以在这个代理方法中判断url的参数，可能是<a href="http://www.a.com/login、http://www.a.com/login.html、http://www.a.com/login.html?name=geek、http://www.a.com/login#readme等等，所以我们判断过url后考虑如何将版本号加到url里面" target="_blank" rel="external">http://www.a.com/login、http://www.a.com/login.html、http://www.a.com/login.html?name=geek、http://www.a.com/login#readme等等，所以我们判断过url后考虑如何将版本号加到url里面</a></li><li>由于我们的App使用了不同模块的UIWebView，但是都是在UIWebView上需要大量的JS交互，所以使用了WebViewJavascriptBridge这个库。UIWebView本身的代理方法不会执行，所以修改这个库里面的WebViewJavascriptBridge.m文件的代码，差不多是下面的方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType &#123;</div><div class="line">    if (webView != _webView) &#123; return YES; &#125;</div><div class="line">    NSURL *url = [rntity Tag 的资源直接访问equest URL];</div><div class="line">    if ([request.URL.absoluteString containsString:@&quot;http&quot;] || [request.URL.absoluteString containsString:@&quot;https&quot;]) &#123;</div><div class="line">        if ([request.URL.absoluteString containsString:@&quot;?&quot;]) &#123;</div><div class="line">            url = [NSURL URLWithString:[NSString stringWithFormat:@&quot;%@&amp;h5V=%@&quot;,request.URL.absoluteString,[ProjectUtil getH5VersionString]]];</div><div class="line">        &#125;else&#123;</div><div class="line">            url = [NSURL URLWithString:[NSString stringWithFormat:@&quot;%@?h5V=%@&quot;,request.URL.absoluteString,[ProjectUtil getH5VersionString]]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    LBPLOG(@&quot;url-&gt;%@&quot;,[url absoluteString]);</div><div class="line">    __strong WVJB_WEBVIEW_DELEGATE_TYPE* strongDelegate = _webViewDelegate;</div><div class="line">    if ([_base isCorrectProcotocolScheme:url]) &#123;</div><div class="line">        if ([_base isBridgeLoadedURL:url]) &#123;</div><div class="line">            [_base injectJavascriptFile];</div><div class="line">        &#125; else if ([_base isQueueMessageURL:url]) &#123;</div><div class="line">            NSString *messageQueueString = [self _evaluateJavascript:[_base webViewJavascriptFetchQueyCommand]];</div><div class="line">            [_base flushMessageQueue:messageQueueString];</div><div class="line">        &#125; else &#123;</div><div class="line">            [_base logUnkownMessage:url];</div><div class="line">        &#125;</div><div class="line">        return NO;</div><div class="line">    &#125; else if (strongDelegate &amp;&amp; [strongDelegate respondsToSelector:@selector(webView:shouldStartLoadWithRequest:navigationType:)]) &#123;</div><div class="line">        return [strongDelegate webView:webView shouldStartLoadWithRequest:request navigationType:navigationType];</div><div class="line">    &#125; else &#123;</div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>总结：</p><p>App的缓存问题暂时研究到这里，后期会继续研究其他方面的问题</p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p>通过浏览器我们知道有的缓存是200 OK（from cache ），有的缓存是304 Not modified。如果运维移除了Entity Tag就一直是200（from cache）。如果没有移除的话2者是交替出现的。</p><p>为什么2者会有区别？</p><ul><li>200 OK（from cache）是直接点击链接或者在浏览器地址栏中输入网址敲回车键的结果</li><li>而304 modified是我们刷新了浏览器页面时触发或者设置了长缓存、但Entity Tags没有移除时触发</li></ul><p>做了 实验得出结论：</p><ul><li><p>直接访问有缓存的网站都触发 200 OK (from cache)</p></li><li><p>刷新浏览器则会触发304</p></li><li><p>同一域名下，没有 Entity Tag 的资源直接访问，是 200 OK (from cache) 的结果</p></li><li><p>同一域名下，有Entity Tag 的资源直接访问，是出现304 Not Modified</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;H5性能优化方面的探索&quot;&gt;&lt;a href=&quot;#H5性能优化方面的探索&quot; class=&quot;headerlink&quot; title=&quot;H5性能优化方面的探索&quot;&gt;&lt;/a&gt;H5性能优化方面的探索&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;H5很重要，很重要，很重要，重要的事情必须
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅地调试手机网页？</title>
    <link href="http://yoursite.com/2017/10/10/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E8%B0%83%E8%AF%95%E6%89%8B%E6%9C%BA%E7%BD%91%E9%A1%B5%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/10/10/如何优雅地调试手机网页？/</id>
    <published>2017-10-10T06:04:27.000Z</published>
    <updated>2017-10-10T06:49:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在web开发的过程中，抓包、调试页面样式、查看请求头是很常用的技巧。其实在iOS开发中，这些技巧也能用（无论是模拟器还是真机），不过我们需要用到mac自带的浏览器Safari。所以，本文将讲解如何使用Safari对iOS程序中的webview进行调试。<br>1、打开真机（模拟器）的开发者模式<br>【设置】-&gt; 【Safari】 -&gt; 【高级】 -&gt; 【Web检查器】打开<br><img src="http://upload-images.jianshu.io/upload_images/2287777-e937adb9c77a3768.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>2、打开MBP上的Safari的开发者模式：<br>【Safari】-&gt;【偏好设置】-&gt;【高级】-&gt; 【在菜单栏中显示“开发”菜单】勾选。<br>3、调试你的WebView页面。<br>4、在MBP的Safari选项中的开发，看到手机，右击可以看到正在调试的WebView的url<br><img src="http://upload-images.jianshu.io/upload_images/2287777-c12eb2da00e79f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>5、在弹出的这个框里面可以查看网页源代码以及可以调试样样式、查看localStorage、sessionStorage、Cookie的值等等，给原生端调试带来很大方便，不过这样前端调试更加方便啊，谷歌的模拟器不能完全模真实环境下的iphone使用效果啊。<br><img src="http://upload-images.jianshu.io/upload_images/2287777-4d55fd205fa81cc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在web开发的过程中，抓包、调试页面样式、查看请求头是很常用的技巧。其实在iOS开发中，这些技巧也能用（无论是模拟器还是真机），不过我们需要用到mac自带的浏览器Safari。所以，本文将讲解如何使用Safari对iOS程序中的webview进行调
      
    
    </summary>
    
    
      <category term="home" scheme="http://yoursite.com/tags/home/"/>
    
  </entry>
  
</feed>
